/*
 * generated by Xtext
 */
grammar InternalLogical;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.ubt.ai1.supermod.text.services.LogicalGrammarAccess;

}

@parser::members {
 
 	private LogicalGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LogicalGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLogicalDimension
entryRuleLogicalDimension 
:
{ before(grammarAccess.getLogicalDimensionRule()); }
	 ruleLogicalDimension
{ after(grammarAccess.getLogicalDimensionRule()); } 
	 EOF 
;

// Rule LogicalDimension
ruleLogicalDimension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalDimensionAccess().getGroup()); }
(rule__LogicalDimension__Group__0)
{ after(grammarAccess.getLogicalDimensionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOption
entryRuleOption 
:
{ before(grammarAccess.getOptionRule()); }
	 ruleOption
{ after(grammarAccess.getOptionRule()); } 
	 EOF 
;

// Rule Option
ruleOption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionAccess().getGroup()); }
(rule__Option__Group__0)
{ after(grammarAccess.getOptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInvariant
entryRuleInvariant 
:
{ before(grammarAccess.getInvariantRule()); }
	 ruleInvariant
{ after(grammarAccess.getInvariantRule()); } 
	 EOF 
;

// Rule Invariant
ruleInvariant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvariantAccess().getGroup()); }
(rule__Invariant__Group__0)
{ after(grammarAccess.getInvariantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreference
entryRulePreference 
:
{ before(grammarAccess.getPreferenceRule()); }
	 rulePreference
{ after(grammarAccess.getPreferenceRule()); } 
	 EOF 
;

// Rule Preference
rulePreference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreferenceAccess().getGroup()); }
(rule__Preference__Group__0)
{ after(grammarAccess.getPreferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefaultBinding
entryRuleDefaultBinding 
:
{ before(grammarAccess.getDefaultBindingRule()); }
	 ruleDefaultBinding
{ after(grammarAccess.getDefaultBindingRule()); } 
	 EOF 
;

// Rule DefaultBinding
ruleDefaultBinding
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefaultBindingAccess().getGroup()); }
(rule__DefaultBinding__Group__0)
{ after(grammarAccess.getDefaultBindingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptionExpr
entryRuleOptionExpr 
:
{ before(grammarAccess.getOptionExprRule()); }
	 ruleOptionExpr
{ after(grammarAccess.getOptionExprRule()); } 
	 EOF 
;

// Rule OptionExpr
ruleOptionExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionExprAccess().getAlternatives()); }
(rule__OptionExpr__Alternatives)
{ after(grammarAccess.getOptionExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBiconditionalExpr
entryRuleBiconditionalExpr 
:
{ before(grammarAccess.getBiconditionalExprRule()); }
	 ruleBiconditionalExpr
{ after(grammarAccess.getBiconditionalExprRule()); } 
	 EOF 
;

// Rule BiconditionalExpr
ruleBiconditionalExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBiconditionalExprAccess().getGroup()); }
(rule__BiconditionalExpr__Group__0)
{ after(grammarAccess.getBiconditionalExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr 
:
{ before(grammarAccess.getImpliesExprRule()); }
	 ruleImpliesExpr
{ after(grammarAccess.getImpliesExprRule()); } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpliesExprAccess().getGroup()); }
(rule__ImpliesExpr__Group__0)
{ after(grammarAccess.getImpliesExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpr
entryRuleOrExpr 
:
{ before(grammarAccess.getOrExprRule()); }
	 ruleOrExpr
{ after(grammarAccess.getOrExprRule()); } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExprAccess().getGroup()); }
(rule__OrExpr__Group__0)
{ after(grammarAccess.getOrExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXorExpr
entryRuleXorExpr 
:
{ before(grammarAccess.getXorExprRule()); }
	 ruleXorExpr
{ after(grammarAccess.getXorExprRule()); } 
	 EOF 
;

// Rule XorExpr
ruleXorExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXorExprAccess().getGroup()); }
(rule__XorExpr__Group__0)
{ after(grammarAccess.getXorExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinusExpr
entryRuleMinusExpr 
:
{ before(grammarAccess.getMinusExprRule()); }
	 ruleMinusExpr
{ after(grammarAccess.getMinusExprRule()); } 
	 EOF 
;

// Rule MinusExpr
ruleMinusExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinusExprAccess().getGroup()); }
(rule__MinusExpr__Group__0)
{ after(grammarAccess.getMinusExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNandExpr
entryRuleNandExpr 
:
{ before(grammarAccess.getNandExprRule()); }
	 ruleNandExpr
{ after(grammarAccess.getNandExprRule()); } 
	 EOF 
;

// Rule NandExpr
ruleNandExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNandExprAccess().getGroup()); }
(rule__NandExpr__Group__0)
{ after(grammarAccess.getNandExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpr
entryRuleAndExpr 
:
{ before(grammarAccess.getAndExprRule()); }
	 ruleAndExpr
{ after(grammarAccess.getAndExprRule()); } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExprAccess().getGroup()); }
(rule__AndExpr__Group__0)
{ after(grammarAccess.getAndExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr 
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
(rule__PrimaryExpr__Alternatives)
{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBigExpr
entryRuleBigExpr 
:
{ before(grammarAccess.getBigExprRule()); }
	 ruleBigExpr
{ after(grammarAccess.getBigExprRule()); } 
	 EOF 
;

// Rule BigExpr
ruleBigExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBigExprAccess().getAlternatives()); }
(rule__BigExpr__Alternatives)
{ after(grammarAccess.getBigExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBigAndExpr
entryRuleBigAndExpr 
:
{ before(grammarAccess.getBigAndExprRule()); }
	 ruleBigAndExpr
{ after(grammarAccess.getBigAndExprRule()); } 
	 EOF 
;

// Rule BigAndExpr
ruleBigAndExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBigAndExprAccess().getGroup()); }
(rule__BigAndExpr__Group__0)
{ after(grammarAccess.getBigAndExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBigOrExpr
entryRuleBigOrExpr 
:
{ before(grammarAccess.getBigOrExprRule()); }
	 ruleBigOrExpr
{ after(grammarAccess.getBigOrExprRule()); } 
	 EOF 
;

// Rule BigOrExpr
ruleBigOrExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBigOrExprAccess().getGroup()); }
(rule__BigOrExpr__Group__0)
{ after(grammarAccess.getBigOrExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBigXorExpr
entryRuleBigXorExpr 
:
{ before(grammarAccess.getBigXorExprRule()); }
	 ruleBigXorExpr
{ after(grammarAccess.getBigXorExprRule()); } 
	 EOF 
;

// Rule BigXorExpr
ruleBigXorExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBigXorExprAccess().getGroup()); }
(rule__BigXorExpr__Group__0)
{ after(grammarAccess.getBigXorExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBigNandExpr
entryRuleBigNandExpr 
:
{ before(grammarAccess.getBigNandExprRule()); }
	 ruleBigNandExpr
{ after(grammarAccess.getBigNandExprRule()); } 
	 EOF 
;

// Rule BigNandExpr
ruleBigNandExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBigNandExprAccess().getGroup()); }
(rule__BigNandExpr__Group__0)
{ after(grammarAccess.getBigNandExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptionRef
entryRuleOptionRef 
:
{ before(grammarAccess.getOptionRefRule()); }
	 ruleOptionRef
{ after(grammarAccess.getOptionRefRule()); } 
	 EOF 
;

// Rule OptionRef
ruleOptionRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionRefAccess().getOptionAssignment()); }
(rule__OptionRef__OptionAssignment)
{ after(grammarAccess.getOptionRefAccess().getOptionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegExpr
entryRuleNegExpr 
:
{ before(grammarAccess.getNegExprRule()); }
	 ruleNegExpr
{ after(grammarAccess.getNegExprRule()); } 
	 EOF 
;

// Rule NegExpr
ruleNegExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegExprAccess().getGroup()); }
(rule__NegExpr__Group__0)
{ after(grammarAccess.getNegExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Tristate
ruleTristate
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTristateAccess().getAlternatives()); }
(rule__Tristate__Alternatives)
{ after(grammarAccess.getTristateAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LogicalDimension__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalOptionsAssignment_5_0()); }
(rule__LogicalDimension__LogicalOptionsAssignment_5_0)
{ after(grammarAccess.getLogicalDimensionAccess().getLogicalOptionsAssignment_5_0()); }
)

    |(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalInvariantsAssignment_5_1()); }
(rule__LogicalDimension__LogicalInvariantsAssignment_5_1)
{ after(grammarAccess.getLogicalDimensionAccess().getLogicalInvariantsAssignment_5_1()); }
)

    |(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalPreferencesAssignment_5_2()); }
(rule__LogicalDimension__LogicalPreferencesAssignment_5_2)
{ after(grammarAccess.getLogicalDimensionAccess().getLogicalPreferencesAssignment_5_2()); }
)

    |(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalDefaultsAssignment_5_3()); }
(rule__LogicalDimension__LogicalDefaultsAssignment_5_3)
{ after(grammarAccess.getLogicalDimensionAccess().getLogicalDefaultsAssignment_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionExprAccess().getBiconditionalExprParserRuleCall_0()); }
	ruleBiconditionalExpr
{ after(grammarAccess.getOptionExprAccess().getBiconditionalExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOptionExprAccess().getBigExprParserRuleCall_1()); }
	ruleBigExpr
{ after(grammarAccess.getOptionExprAccess().getBigExprParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getGroup_0()); }
(rule__PrimaryExpr__Group_0__0)
{ after(grammarAccess.getPrimaryExprAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getOptionRefParserRuleCall_1()); }
	ruleOptionRef
{ after(grammarAccess.getPrimaryExprAccess().getOptionRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getNegExprParserRuleCall_2()); }
	ruleNegExpr
{ after(grammarAccess.getPrimaryExprAccess().getNegExprParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigExprAccess().getBigAndExprParserRuleCall_0()); }
	ruleBigAndExpr
{ after(grammarAccess.getBigExprAccess().getBigAndExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBigExprAccess().getBigOrExprParserRuleCall_1()); }
	ruleBigOrExpr
{ after(grammarAccess.getBigExprAccess().getBigOrExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBigExprAccess().getBigXorExprParserRuleCall_2()); }
	ruleBigXorExpr
{ after(grammarAccess.getBigExprAccess().getBigXorExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBigExprAccess().getBigNandExprParserRuleCall_3()); }
	ruleBigNandExpr
{ after(grammarAccess.getBigExprAccess().getBigNandExprParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tristate__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTristateAccess().getUnknownEnumLiteralDeclaration_0()); }
(	'unknown' 
)
{ after(grammarAccess.getTristateAccess().getUnknownEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTristateAccess().getTrueEnumLiteralDeclaration_1()); }
(	'true' 
)
{ after(grammarAccess.getTristateAccess().getTrueEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTristateAccess().getFalseEnumLiteralDeclaration_2()); }
(	'false' 
)
{ after(grammarAccess.getTristateAccess().getFalseEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LogicalDimension__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__0__Impl
	rule__LogicalDimension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalDimensionAction_0()); }
(

)
{ after(grammarAccess.getLogicalDimensionAccess().getLogicalDimensionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__1__Impl
	rule__LogicalDimension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalKeyword_1()); }

	'logical' 

{ after(grammarAccess.getLogicalDimensionAccess().getLogicalKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__2__Impl
	rule__LogicalDimension__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getDimensionKeyword_2()); }

	'dimension' 

{ after(grammarAccess.getLogicalDimensionAccess().getDimensionKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__3__Impl
	rule__LogicalDimension__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getDimensionNameAssignment_3()); }
(rule__LogicalDimension__DimensionNameAssignment_3)
{ after(grammarAccess.getLogicalDimensionAccess().getDimensionNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__4__Impl
	rule__LogicalDimension__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getLogicalDimensionAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__5__Impl
	rule__LogicalDimension__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getAlternatives_5()); }
(rule__LogicalDimension__Alternatives_5)*
{ after(grammarAccess.getLogicalDimensionAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalDimension__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalDimension__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getLogicalDimensionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Option__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__0__Impl
	rule__Option__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getOptionKeyword_0()); }

	'option' 

{ after(grammarAccess.getOptionAccess().getOptionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Option__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getNameAssignment_1()); }
(rule__Option__NameAssignment_1)
{ after(grammarAccess.getOptionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Invariant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__0__Impl
	rule__Invariant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getInvariantKeyword_0()); }

	'invariant' 

{ after(grammarAccess.getInvariantAccess().getInvariantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__1__Impl
	rule__Invariant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getNameAssignment_1()); }
(rule__Invariant__NameAssignment_1)
{ after(grammarAccess.getInvariantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__2__Impl
	rule__Invariant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getInvariantAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__3__Impl
	rule__Invariant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getOptionExprAssignment_3()); }
(rule__Invariant__OptionExprAssignment_3)
{ after(grammarAccess.getInvariantAccess().getOptionExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invariant__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invariant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getInvariantAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Preference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__0__Impl
	rule__Preference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getPreferenceKeyword_0()); }

	'preference' 

{ after(grammarAccess.getPreferenceAccess().getPreferenceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__1__Impl
	rule__Preference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getNameAssignment_1()); }
(rule__Preference__NameAssignment_1)
{ after(grammarAccess.getPreferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__2__Impl
	rule__Preference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getForKeyword_2()); }

	'for' 

{ after(grammarAccess.getPreferenceAccess().getForKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__3__Impl
	rule__Preference__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getOptionAssignment_3()); }
(rule__Preference__OptionAssignment_3)
{ after(grammarAccess.getPreferenceAccess().getOptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__4__Impl
	rule__Preference__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getPreferenceAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__5__Impl
	rule__Preference__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getOptionExprAssignment_5()); }
(rule__Preference__OptionExprAssignment_5)
{ after(grammarAccess.getPreferenceAccess().getOptionExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preference__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preference__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getPreferenceAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__DefaultBinding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__0__Impl
	rule__DefaultBinding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getDefaultKeyword_0()); }

	'default' 

{ after(grammarAccess.getDefaultBindingAccess().getDefaultKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__1__Impl
	rule__DefaultBinding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getBindingKeyword_1()); }

	'binding' 

{ after(grammarAccess.getDefaultBindingAccess().getBindingKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__2__Impl
	rule__DefaultBinding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getNameAssignment_2()); }
(rule__DefaultBinding__NameAssignment_2)
{ after(grammarAccess.getDefaultBindingAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__3__Impl
	rule__DefaultBinding__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getForKeyword_3()); }

	'for' 

{ after(grammarAccess.getDefaultBindingAccess().getForKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__4__Impl
	rule__DefaultBinding__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getOptionAssignment_4()); }
(rule__DefaultBinding__OptionAssignment_4)
{ after(grammarAccess.getDefaultBindingAccess().getOptionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__5__Impl
	rule__DefaultBinding__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getEqualsSignKeyword_5()); }

	'=' 

{ after(grammarAccess.getDefaultBindingAccess().getEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultBinding__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultBinding__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getStateAssignment_6()); }
(rule__DefaultBinding__StateAssignment_6)
{ after(grammarAccess.getDefaultBindingAccess().getStateAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__BiconditionalExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BiconditionalExpr__Group__0__Impl
	rule__BiconditionalExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getImpliesExprParserRuleCall_0()); }
	ruleImpliesExpr
{ after(grammarAccess.getBiconditionalExprAccess().getImpliesExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BiconditionalExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BiconditionalExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getGroup_1()); }
(rule__BiconditionalExpr__Group_1__0)*
{ after(grammarAccess.getBiconditionalExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BiconditionalExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BiconditionalExpr__Group_1__0__Impl
	rule__BiconditionalExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getBiconditionalExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBiconditionalExprAccess().getBiconditionalExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BiconditionalExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BiconditionalExpr__Group_1__1__Impl
	rule__BiconditionalExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getK_IFFTerminalRuleCall_1_1()); }
	RULE_K_IFF
{ after(grammarAccess.getBiconditionalExprAccess().getK_IFFTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BiconditionalExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BiconditionalExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getRightAssignment_1_2()); }
(rule__BiconditionalExpr__RightAssignment_1_2)
{ after(grammarAccess.getBiconditionalExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImpliesExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpr__Group__0__Impl
	rule__ImpliesExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); }
	ruleOrExpr
{ after(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getGroup_1()); }
(rule__ImpliesExpr__Group_1__0)*
{ after(grammarAccess.getImpliesExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpr__Group_1__0__Impl
	rule__ImpliesExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getImpliesExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImpliesExprAccess().getImpliesExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpr__Group_1__1__Impl
	rule__ImpliesExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getK_IMPTerminalRuleCall_1_1()); }
	RULE_K_IMP
{ after(grammarAccess.getImpliesExprAccess().getK_IMPTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getRightAssignment_1_2()); }
(rule__ImpliesExpr__RightAssignment_1_2)
{ after(grammarAccess.getImpliesExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__0__Impl
	rule__OrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getXorExprParserRuleCall_0()); }
	ruleXorExpr
{ after(grammarAccess.getOrExprAccess().getXorExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getGroup_1()); }
(rule__OrExpr__Group_1__0)*
{ after(grammarAccess.getOrExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__0__Impl
	rule__OrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__1__Impl
	rule__OrExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getK_ORTerminalRuleCall_1_1()); }
	RULE_K_OR
{ after(grammarAccess.getOrExprAccess().getK_ORTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
(rule__OrExpr__RightAssignment_1_2)
{ after(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__XorExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpr__Group__0__Impl
	rule__XorExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getMinusExprParserRuleCall_0()); }
	ruleMinusExpr
{ after(grammarAccess.getXorExprAccess().getMinusExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getGroup_1()); }
(rule__XorExpr__Group_1__0)*
{ after(grammarAccess.getXorExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XorExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpr__Group_1__0__Impl
	rule__XorExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getXorExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getXorExprAccess().getXorExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpr__Group_1__1__Impl
	rule__XorExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getK_XORTerminalRuleCall_1_1()); }
	RULE_K_XOR
{ after(grammarAccess.getXorExprAccess().getK_XORTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getRightAssignment_1_2()); }
(rule__XorExpr__RightAssignment_1_2)
{ after(grammarAccess.getXorExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MinusExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinusExpr__Group__0__Impl
	rule__MinusExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getNandExprParserRuleCall_0()); }
	ruleNandExpr
{ after(grammarAccess.getMinusExprAccess().getNandExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinusExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinusExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getGroup_1()); }
(rule__MinusExpr__Group_1__0)*
{ after(grammarAccess.getMinusExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MinusExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinusExpr__Group_1__0__Impl
	rule__MinusExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getMinusExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMinusExprAccess().getMinusExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinusExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinusExpr__Group_1__1__Impl
	rule__MinusExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getK_MINUSTerminalRuleCall_1_1()); }
	RULE_K_MINUS
{ after(grammarAccess.getMinusExprAccess().getK_MINUSTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinusExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinusExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getRightAssignment_1_2()); }
(rule__MinusExpr__RightAssignment_1_2)
{ after(grammarAccess.getMinusExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NandExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NandExpr__Group__0__Impl
	rule__NandExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getAndExprParserRuleCall_0()); }
	ruleAndExpr
{ after(grammarAccess.getNandExprAccess().getAndExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NandExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NandExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getGroup_1()); }
(rule__NandExpr__Group_1__0)*
{ after(grammarAccess.getNandExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NandExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NandExpr__Group_1__0__Impl
	rule__NandExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getNandExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getNandExprAccess().getNandExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NandExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NandExpr__Group_1__1__Impl
	rule__NandExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getK_NANDTerminalRuleCall_1_1()); }
	RULE_K_NAND
{ after(grammarAccess.getNandExprAccess().getK_NANDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NandExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NandExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getRightAssignment_1_2()); }
(rule__NandExpr__RightAssignment_1_2)
{ after(grammarAccess.getNandExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__0__Impl
	rule__AndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getPrimaryExprParserRuleCall_0()); }
	rulePrimaryExpr
{ after(grammarAccess.getAndExprAccess().getPrimaryExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getGroup_1()); }
(rule__AndExpr__Group_1__0)*
{ after(grammarAccess.getAndExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__0__Impl
	rule__AndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__1__Impl
	rule__AndExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getK_ANDTerminalRuleCall_1_1()); }
	RULE_K_AND
{ after(grammarAccess.getAndExprAccess().getK_ANDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
(rule__AndExpr__RightAssignment_1_2)
{ after(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpr__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpr__Group_0__0__Impl
	rule__PrimaryExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getP_OPENTerminalRuleCall_0_0()); }
	RULE_P_OPEN
{ after(grammarAccess.getPrimaryExprAccess().getP_OPENTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpr__Group_0__1__Impl
	rule__PrimaryExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getImpliesExprParserRuleCall_0_1()); }
	ruleImpliesExpr
{ after(grammarAccess.getPrimaryExprAccess().getImpliesExprParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getP_CLOSETerminalRuleCall_0_2()); }
	RULE_P_CLOSE
{ after(grammarAccess.getPrimaryExprAccess().getP_CLOSETerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BigAndExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group__0__Impl
	rule__BigAndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getK_BIG_ANDTerminalRuleCall_0()); }
	RULE_K_BIG_AND
{ after(grammarAccess.getBigAndExprAccess().getK_BIG_ANDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigAndExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group__1__Impl
	rule__BigAndExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getP_OPENTerminalRuleCall_1()); }
	RULE_P_OPEN
{ after(grammarAccess.getBigAndExprAccess().getP_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigAndExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group__2__Impl
	rule__BigAndExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getChildrenAssignment_2()); }
(rule__BigAndExpr__ChildrenAssignment_2)
{ after(grammarAccess.getBigAndExprAccess().getChildrenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigAndExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group__3__Impl
	rule__BigAndExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getGroup_3()); }
(rule__BigAndExpr__Group_3__0)*
{ after(grammarAccess.getBigAndExprAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigAndExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getP_CLOSETerminalRuleCall_4()); }
	RULE_P_CLOSE
{ after(grammarAccess.getBigAndExprAccess().getP_CLOSETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BigAndExpr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group_3__0__Impl
	rule__BigAndExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getBigAndExprAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigAndExpr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigAndExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getChildrenAssignment_3_1()); }
(rule__BigAndExpr__ChildrenAssignment_3_1)
{ after(grammarAccess.getBigAndExprAccess().getChildrenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BigOrExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group__0__Impl
	rule__BigOrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getK_BIG_ORTerminalRuleCall_0()); }
	RULE_K_BIG_OR
{ after(grammarAccess.getBigOrExprAccess().getK_BIG_ORTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigOrExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group__1__Impl
	rule__BigOrExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getP_OPENTerminalRuleCall_1()); }
	RULE_P_OPEN
{ after(grammarAccess.getBigOrExprAccess().getP_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigOrExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group__2__Impl
	rule__BigOrExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getChildrenAssignment_2()); }
(rule__BigOrExpr__ChildrenAssignment_2)
{ after(grammarAccess.getBigOrExprAccess().getChildrenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigOrExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group__3__Impl
	rule__BigOrExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getGroup_3()); }
(rule__BigOrExpr__Group_3__0)*
{ after(grammarAccess.getBigOrExprAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigOrExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getP_CLOSETerminalRuleCall_4()); }
	RULE_P_CLOSE
{ after(grammarAccess.getBigOrExprAccess().getP_CLOSETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BigOrExpr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group_3__0__Impl
	rule__BigOrExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getBigOrExprAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigOrExpr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigOrExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getChildrenAssignment_3_1()); }
(rule__BigOrExpr__ChildrenAssignment_3_1)
{ after(grammarAccess.getBigOrExprAccess().getChildrenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BigXorExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group__0__Impl
	rule__BigXorExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getK_BIG_XORTerminalRuleCall_0()); }
	RULE_K_BIG_XOR
{ after(grammarAccess.getBigXorExprAccess().getK_BIG_XORTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigXorExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group__1__Impl
	rule__BigXorExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getP_OPENTerminalRuleCall_1()); }
	RULE_P_OPEN
{ after(grammarAccess.getBigXorExprAccess().getP_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigXorExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group__2__Impl
	rule__BigXorExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getChildrenAssignment_2()); }
(rule__BigXorExpr__ChildrenAssignment_2)
{ after(grammarAccess.getBigXorExprAccess().getChildrenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigXorExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group__3__Impl
	rule__BigXorExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getGroup_3()); }
(rule__BigXorExpr__Group_3__0)*
{ after(grammarAccess.getBigXorExprAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigXorExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getP_CLOSETerminalRuleCall_4()); }
	RULE_P_CLOSE
{ after(grammarAccess.getBigXorExprAccess().getP_CLOSETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BigXorExpr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group_3__0__Impl
	rule__BigXorExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getBigXorExprAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigXorExpr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigXorExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getChildrenAssignment_3_1()); }
(rule__BigXorExpr__ChildrenAssignment_3_1)
{ after(grammarAccess.getBigXorExprAccess().getChildrenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BigNandExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group__0__Impl
	rule__BigNandExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getK_BIG_NANDTerminalRuleCall_0()); }
	RULE_K_BIG_NAND
{ after(grammarAccess.getBigNandExprAccess().getK_BIG_NANDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigNandExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group__1__Impl
	rule__BigNandExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getP_OPENTerminalRuleCall_1()); }
	RULE_P_OPEN
{ after(grammarAccess.getBigNandExprAccess().getP_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigNandExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group__2__Impl
	rule__BigNandExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getChildrenAssignment_2()); }
(rule__BigNandExpr__ChildrenAssignment_2)
{ after(grammarAccess.getBigNandExprAccess().getChildrenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigNandExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group__3__Impl
	rule__BigNandExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getGroup_3()); }
(rule__BigNandExpr__Group_3__0)*
{ after(grammarAccess.getBigNandExprAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigNandExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getP_CLOSETerminalRuleCall_4()); }
	RULE_P_CLOSE
{ after(grammarAccess.getBigNandExprAccess().getP_CLOSETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BigNandExpr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group_3__0__Impl
	rule__BigNandExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getBigNandExprAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BigNandExpr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BigNandExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getChildrenAssignment_3_1()); }
(rule__BigNandExpr__ChildrenAssignment_3_1)
{ after(grammarAccess.getBigNandExprAccess().getChildrenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpr__Group__0__Impl
	rule__NegExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExprAccess().getK_NOTTerminalRuleCall_0()); }
	RULE_K_NOT
{ after(grammarAccess.getNegExprAccess().getK_NOTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExprAccess().getNegAssignment_1()); }
(rule__NegExpr__NegAssignment_1)
{ after(grammarAccess.getNegExprAccess().getNegAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LogicalDimension__DimensionNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getDimensionNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getLogicalDimensionAccess().getDimensionNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__LogicalOptionsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalOptionsOptionParserRuleCall_5_0_0()); }
	ruleOption{ after(grammarAccess.getLogicalDimensionAccess().getLogicalOptionsOptionParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__LogicalInvariantsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalInvariantsInvariantParserRuleCall_5_1_0()); }
	ruleInvariant{ after(grammarAccess.getLogicalDimensionAccess().getLogicalInvariantsInvariantParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__LogicalPreferencesAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalPreferencesPreferenceParserRuleCall_5_2_0()); }
	rulePreference{ after(grammarAccess.getLogicalDimensionAccess().getLogicalPreferencesPreferenceParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalDimension__LogicalDefaultsAssignment_5_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalDimensionAccess().getLogicalDefaultsDefaultBindingParserRuleCall_5_3_0()); }
	ruleDefaultBinding{ after(grammarAccess.getLogicalDimensionAccess().getLogicalDefaultsDefaultBindingParserRuleCall_5_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Option__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOptionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInvariantAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invariant__OptionExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantAccess().getOptionExprOptionExprParserRuleCall_3_0()); }
	ruleOptionExpr{ after(grammarAccess.getInvariantAccess().getOptionExprOptionExprParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPreferenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__OptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getOptionOptionCrossReference_3_0()); }
(
{ before(grammarAccess.getPreferenceAccess().getOptionOptionIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPreferenceAccess().getOptionOptionIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPreferenceAccess().getOptionOptionCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preference__OptionExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreferenceAccess().getOptionExprOptionExprParserRuleCall_5_0()); }
	ruleOptionExpr{ after(grammarAccess.getPreferenceAccess().getOptionExprOptionExprParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDefaultBindingAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__OptionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getOptionOptionCrossReference_4_0()); }
(
{ before(grammarAccess.getDefaultBindingAccess().getOptionOptionIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getDefaultBindingAccess().getOptionOptionIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getDefaultBindingAccess().getOptionOptionCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultBinding__StateAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultBindingAccess().getStateTristateEnumRuleCall_6_0()); }
	ruleTristate{ after(grammarAccess.getDefaultBindingAccess().getStateTristateEnumRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BiconditionalExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBiconditionalExprAccess().getRightBiconditionalExprParserRuleCall_1_2_0()); }
	ruleBiconditionalExpr{ after(grammarAccess.getBiconditionalExprAccess().getRightBiconditionalExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExprAccess().getRightOrExprParserRuleCall_1_2_0()); }
	ruleOrExpr{ after(grammarAccess.getImpliesExprAccess().getRightOrExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getRightXorExprParserRuleCall_1_2_0()); }
	ruleXorExpr{ after(grammarAccess.getOrExprAccess().getRightXorExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExprAccess().getRightMinusExprParserRuleCall_1_2_0()); }
	ruleMinusExpr{ after(grammarAccess.getXorExprAccess().getRightMinusExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinusExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinusExprAccess().getRightNandExprParserRuleCall_1_2_0()); }
	ruleNandExpr{ after(grammarAccess.getMinusExprAccess().getRightNandExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NandExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNandExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
	ruleAndExpr{ after(grammarAccess.getNandExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
	rulePrimaryExpr{ after(grammarAccess.getAndExprAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__ChildrenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigAndExpr__ChildrenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__ChildrenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigOrExpr__ChildrenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__ChildrenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigXorExpr__ChildrenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__ChildrenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BigNandExpr__ChildrenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
	ruleOptionExpr{ after(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionRef__OptionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionRefAccess().getOptionOptionCrossReference_0()); }
(
{ before(grammarAccess.getOptionRefAccess().getOptionOptionIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getOptionRefAccess().getOptionOptionIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getOptionRefAccess().getOptionOptionCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpr__NegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExprAccess().getNegOptionExprParserRuleCall_1_0()); }
	ruleOptionExpr{ after(grammarAccess.getNegExprAccess().getNegOptionExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_P_OPEN : '(';

RULE_P_CLOSE : ')';

RULE_K_NOT : 'not';

RULE_K_AND : 'and';

RULE_K_OR : 'or';

RULE_K_XOR : 'xor';

RULE_K_IMP : 'implies';

RULE_K_IFF : 'iff';

RULE_K_MINUS : 'minus';

RULE_K_NAND : 'nand';

RULE_K_BIG_AND : 'AND';

RULE_K_BIG_OR : 'OR';

RULE_K_BIG_XOR : 'XOR';

RULE_K_BIG_NAND : 'NAND';

RULE_COMMA : ',';

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


