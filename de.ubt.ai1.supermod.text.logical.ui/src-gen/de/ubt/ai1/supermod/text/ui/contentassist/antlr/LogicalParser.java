/*
 * generated by Xtext
 */
package de.ubt.ai1.supermod.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.ubt.ai1.supermod.text.services.LogicalGrammarAccess;

public class LogicalParser extends AbstractContentAssistParser {
	
	@Inject
	private LogicalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal.InternalLogicalParser createParser() {
		de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal.InternalLogicalParser result = new de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal.InternalLogicalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLogicalDimensionAccess().getAlternatives_5(), "rule__LogicalDimension__Alternatives_5");
					put(grammarAccess.getOptionExprAccess().getAlternatives(), "rule__OptionExpr__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
					put(grammarAccess.getBigExprAccess().getAlternatives(), "rule__BigExpr__Alternatives");
					put(grammarAccess.getTristateAccess().getAlternatives(), "rule__Tristate__Alternatives");
					put(grammarAccess.getLogicalDimensionAccess().getGroup(), "rule__LogicalDimension__Group__0");
					put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
					put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
					put(grammarAccess.getPreferenceAccess().getGroup(), "rule__Preference__Group__0");
					put(grammarAccess.getDefaultBindingAccess().getGroup(), "rule__DefaultBinding__Group__0");
					put(grammarAccess.getBiconditionalExprAccess().getGroup(), "rule__BiconditionalExpr__Group__0");
					put(grammarAccess.getBiconditionalExprAccess().getGroup_1(), "rule__BiconditionalExpr__Group_1__0");
					put(grammarAccess.getImpliesExprAccess().getGroup(), "rule__ImpliesExpr__Group__0");
					put(grammarAccess.getImpliesExprAccess().getGroup_1(), "rule__ImpliesExpr__Group_1__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getXorExprAccess().getGroup(), "rule__XorExpr__Group__0");
					put(grammarAccess.getXorExprAccess().getGroup_1(), "rule__XorExpr__Group_1__0");
					put(grammarAccess.getMinusExprAccess().getGroup(), "rule__MinusExpr__Group__0");
					put(grammarAccess.getMinusExprAccess().getGroup_1(), "rule__MinusExpr__Group_1__0");
					put(grammarAccess.getNandExprAccess().getGroup(), "rule__NandExpr__Group__0");
					put(grammarAccess.getNandExprAccess().getGroup_1(), "rule__NandExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_0(), "rule__PrimaryExpr__Group_0__0");
					put(grammarAccess.getBigAndExprAccess().getGroup(), "rule__BigAndExpr__Group__0");
					put(grammarAccess.getBigAndExprAccess().getGroup_3(), "rule__BigAndExpr__Group_3__0");
					put(grammarAccess.getBigOrExprAccess().getGroup(), "rule__BigOrExpr__Group__0");
					put(grammarAccess.getBigOrExprAccess().getGroup_3(), "rule__BigOrExpr__Group_3__0");
					put(grammarAccess.getBigXorExprAccess().getGroup(), "rule__BigXorExpr__Group__0");
					put(grammarAccess.getBigXorExprAccess().getGroup_3(), "rule__BigXorExpr__Group_3__0");
					put(grammarAccess.getBigNandExprAccess().getGroup(), "rule__BigNandExpr__Group__0");
					put(grammarAccess.getBigNandExprAccess().getGroup_3(), "rule__BigNandExpr__Group_3__0");
					put(grammarAccess.getNegExprAccess().getGroup(), "rule__NegExpr__Group__0");
					put(grammarAccess.getLogicalDimensionAccess().getDimensionNameAssignment_3(), "rule__LogicalDimension__DimensionNameAssignment_3");
					put(grammarAccess.getLogicalDimensionAccess().getLogicalOptionsAssignment_5_0(), "rule__LogicalDimension__LogicalOptionsAssignment_5_0");
					put(grammarAccess.getLogicalDimensionAccess().getLogicalInvariantsAssignment_5_1(), "rule__LogicalDimension__LogicalInvariantsAssignment_5_1");
					put(grammarAccess.getLogicalDimensionAccess().getLogicalPreferencesAssignment_5_2(), "rule__LogicalDimension__LogicalPreferencesAssignment_5_2");
					put(grammarAccess.getLogicalDimensionAccess().getLogicalDefaultsAssignment_5_3(), "rule__LogicalDimension__LogicalDefaultsAssignment_5_3");
					put(grammarAccess.getOptionAccess().getNameAssignment_1(), "rule__Option__NameAssignment_1");
					put(grammarAccess.getInvariantAccess().getNameAssignment_1(), "rule__Invariant__NameAssignment_1");
					put(grammarAccess.getInvariantAccess().getOptionExprAssignment_3(), "rule__Invariant__OptionExprAssignment_3");
					put(grammarAccess.getPreferenceAccess().getNameAssignment_1(), "rule__Preference__NameAssignment_1");
					put(grammarAccess.getPreferenceAccess().getOptionAssignment_3(), "rule__Preference__OptionAssignment_3");
					put(grammarAccess.getPreferenceAccess().getOptionExprAssignment_5(), "rule__Preference__OptionExprAssignment_5");
					put(grammarAccess.getDefaultBindingAccess().getNameAssignment_2(), "rule__DefaultBinding__NameAssignment_2");
					put(grammarAccess.getDefaultBindingAccess().getOptionAssignment_4(), "rule__DefaultBinding__OptionAssignment_4");
					put(grammarAccess.getDefaultBindingAccess().getStateAssignment_6(), "rule__DefaultBinding__StateAssignment_6");
					put(grammarAccess.getBiconditionalExprAccess().getRightAssignment_1_2(), "rule__BiconditionalExpr__RightAssignment_1_2");
					put(grammarAccess.getImpliesExprAccess().getRightAssignment_1_2(), "rule__ImpliesExpr__RightAssignment_1_2");
					put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
					put(grammarAccess.getXorExprAccess().getRightAssignment_1_2(), "rule__XorExpr__RightAssignment_1_2");
					put(grammarAccess.getMinusExprAccess().getRightAssignment_1_2(), "rule__MinusExpr__RightAssignment_1_2");
					put(grammarAccess.getNandExprAccess().getRightAssignment_1_2(), "rule__NandExpr__RightAssignment_1_2");
					put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
					put(grammarAccess.getBigAndExprAccess().getChildrenAssignment_2(), "rule__BigAndExpr__ChildrenAssignment_2");
					put(grammarAccess.getBigAndExprAccess().getChildrenAssignment_3_1(), "rule__BigAndExpr__ChildrenAssignment_3_1");
					put(grammarAccess.getBigOrExprAccess().getChildrenAssignment_2(), "rule__BigOrExpr__ChildrenAssignment_2");
					put(grammarAccess.getBigOrExprAccess().getChildrenAssignment_3_1(), "rule__BigOrExpr__ChildrenAssignment_3_1");
					put(grammarAccess.getBigXorExprAccess().getChildrenAssignment_2(), "rule__BigXorExpr__ChildrenAssignment_2");
					put(grammarAccess.getBigXorExprAccess().getChildrenAssignment_3_1(), "rule__BigXorExpr__ChildrenAssignment_3_1");
					put(grammarAccess.getBigNandExprAccess().getChildrenAssignment_2(), "rule__BigNandExpr__ChildrenAssignment_2");
					put(grammarAccess.getBigNandExprAccess().getChildrenAssignment_3_1(), "rule__BigNandExpr__ChildrenAssignment_3_1");
					put(grammarAccess.getOptionRefAccess().getOptionAssignment(), "rule__OptionRef__OptionAssignment");
					put(grammarAccess.getNegExprAccess().getNegAssignment_1(), "rule__NegExpr__NegAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal.InternalLogicalParser typedParser = (de.ubt.ai1.supermod.text.ui.contentassist.antlr.internal.InternalLogicalParser) parser;
			typedParser.entryRuleLogicalDimension();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public LogicalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LogicalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
