/*
 * generated by Xtext
 */
grammar InternalOptionLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.ubt.ai1.supermod.oel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.ubt.ai1.supermod.oel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.ubt.ai1.supermod.oel.services.OptionLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private OptionLangGrammarAccess grammarAccess;
 	
    public InternalOptionLangParser(TokenStream input, OptionLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "OptionExpr";	
   	}
   	
   	@Override
   	protected OptionLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOptionExpr
entryRuleOptionExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionExprRule()); }
	 iv_ruleOptionExpr=ruleOptionExpr 
	 { $current=$iv_ruleOptionExpr.current; } 
	 EOF 
;

// Rule OptionExpr
ruleOptionExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOptionExprAccess().getBiconditionalExprParserRuleCall_0()); 
    }
    this_BiconditionalExpr_0=ruleBiconditionalExpr
    { 
        $current = $this_BiconditionalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOptionExprAccess().getBigExprParserRuleCall_1()); 
    }
    this_BigExpr_1=ruleBigExpr
    { 
        $current = $this_BigExpr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBiconditionalExpr
entryRuleBiconditionalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBiconditionalExprRule()); }
	 iv_ruleBiconditionalExpr=ruleBiconditionalExpr 
	 { $current=$iv_ruleBiconditionalExpr.current; } 
	 EOF 
;

// Rule BiconditionalExpr
ruleBiconditionalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBiconditionalExprAccess().getImpliesExprParserRuleCall_0()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBiconditionalExprAccess().getBiconditionalExprLeftAction_1_0(),
            $current);
    }
)this_K_IFF_2=RULE_K_IFF
    { 
    newLeafNode(this_K_IFF_2, grammarAccess.getBiconditionalExprAccess().getK_IFFTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBiconditionalExprAccess().getRightBiconditionalExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBiconditionalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBiconditionalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.BiconditionalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getImpliesExprLeftAction_1_0(),
            $current);
    }
)this_K_IMP_2=RULE_K_IMP
    { 
    newLeafNode(this_K_IMP_2, grammarAccess.getImpliesExprAccess().getK_IMPTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightOrExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getXorExprParserRuleCall_0()); 
    }
    this_XorExpr_0=ruleXorExpr
    { 
        $current = $this_XorExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getOrExprLeftAction_1_0(),
            $current);
    }
)this_K_OR_2=RULE_K_OR
    { 
    newLeafNode(this_K_OR_2, grammarAccess.getOrExprAccess().getK_ORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightXorExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleXorExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.XorExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXorExpr
entryRuleXorExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorExprRule()); }
	 iv_ruleXorExpr=ruleXorExpr 
	 { $current=$iv_ruleXorExpr.current; } 
	 EOF 
;

// Rule XorExpr
ruleXorExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getXorExprAccess().getMinusExprParserRuleCall_0()); 
    }
    this_MinusExpr_0=ruleMinusExpr
    { 
        $current = $this_MinusExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXorExprAccess().getXorExprLeftAction_1_0(),
            $current);
    }
)this_K_XOR_2=RULE_K_XOR
    { 
    newLeafNode(this_K_XOR_2, grammarAccess.getXorExprAccess().getK_XORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorExprAccess().getRightMinusExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMinusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.MinusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMinusExpr
entryRuleMinusExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinusExprRule()); }
	 iv_ruleMinusExpr=ruleMinusExpr 
	 { $current=$iv_ruleMinusExpr.current; } 
	 EOF 
;

// Rule MinusExpr
ruleMinusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMinusExprAccess().getNandExprParserRuleCall_0()); 
    }
    this_NandExpr_0=ruleNandExpr
    { 
        $current = $this_NandExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMinusExprAccess().getMinusExprLeftAction_1_0(),
            $current);
    }
)this_K_MINUS_2=RULE_K_MINUS
    { 
    newLeafNode(this_K_MINUS_2, grammarAccess.getMinusExprAccess().getK_MINUSTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinusExprAccess().getRightNandExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNandExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.NandExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNandExpr
entryRuleNandExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNandExprRule()); }
	 iv_ruleNandExpr=ruleNandExpr 
	 { $current=$iv_ruleNandExpr.current; } 
	 EOF 
;

// Rule NandExpr
ruleNandExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNandExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNandExprAccess().getNandExprLeftAction_1_0(),
            $current);
    }
)this_K_NAND_2=RULE_K_NAND
    { 
    newLeafNode(this_K_NAND_2, grammarAccess.getNandExprAccess().getK_NANDTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNandExprAccess().getRightAndExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNandExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getPrimaryExprParserRuleCall_0()); 
    }
    this_PrimaryExpr_0=rulePrimaryExpr
    { 
        $current = $this_PrimaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getAndExprLeftAction_1_0(),
            $current);
    }
)this_K_AND_2=RULE_K_AND
    { 
    newLeafNode(this_K_AND_2, grammarAccess.getAndExprAccess().getK_ANDTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightPrimaryExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.PrimaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	 iv_rulePrimaryExpr=rulePrimaryExpr 
	 { $current=$iv_rulePrimaryExpr.current; } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_P_OPEN_0=RULE_P_OPEN
    { 
    newLeafNode(this_P_OPEN_0, grammarAccess.getPrimaryExprAccess().getP_OPENTerminalRuleCall_0_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getImpliesExprParserRuleCall_0_1()); 
    }
    this_ImpliesExpr_1=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_1.current; 
        afterParserOrEnumRuleCall();
    }
this_P_CLOSE_2=RULE_P_CLOSE
    { 
    newLeafNode(this_P_CLOSE_2, grammarAccess.getPrimaryExprAccess().getP_CLOSETerminalRuleCall_0_2()); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getOptionRefParserRuleCall_1()); 
    }
    this_OptionRef_3=ruleOptionRef
    { 
        $current = $this_OptionRef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getNegExprParserRuleCall_2()); 
    }
    this_NegExpr_4=ruleNegExpr
    { 
        $current = $this_NegExpr_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBigExpr
entryRuleBigExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBigExprRule()); }
	 iv_ruleBigExpr=ruleBigExpr 
	 { $current=$iv_ruleBigExpr.current; } 
	 EOF 
;

// Rule BigExpr
ruleBigExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBigExprAccess().getBigAndExprParserRuleCall_0()); 
    }
    this_BigAndExpr_0=ruleBigAndExpr
    { 
        $current = $this_BigAndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBigExprAccess().getBigOrExprParserRuleCall_1()); 
    }
    this_BigOrExpr_1=ruleBigOrExpr
    { 
        $current = $this_BigOrExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBigExprAccess().getBigXorExprParserRuleCall_2()); 
    }
    this_BigXorExpr_2=ruleBigXorExpr
    { 
        $current = $this_BigXorExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBigExprAccess().getBigNandExprParserRuleCall_3()); 
    }
    this_BigNandExpr_3=ruleBigNandExpr
    { 
        $current = $this_BigNandExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBigAndExpr
entryRuleBigAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBigAndExprRule()); }
	 iv_ruleBigAndExpr=ruleBigAndExpr 
	 { $current=$iv_ruleBigAndExpr.current; } 
	 EOF 
;

// Rule BigAndExpr
ruleBigAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_K_BIG_AND_0=RULE_K_BIG_AND
    { 
    newLeafNode(this_K_BIG_AND_0, grammarAccess.getBigAndExprAccess().getK_BIG_ANDTerminalRuleCall_0()); 
    }
this_P_OPEN_1=RULE_P_OPEN
    { 
    newLeafNode(this_P_OPEN_1, grammarAccess.getBigAndExprAccess().getP_OPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_2_0()); 
	    }
		lv_children_2_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigAndExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getBigAndExprAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigAndExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); 
	    }
		lv_children_4_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigAndExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_P_CLOSE_5=RULE_P_CLOSE
    { 
    newLeafNode(this_P_CLOSE_5, grammarAccess.getBigAndExprAccess().getP_CLOSETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleBigOrExpr
entryRuleBigOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBigOrExprRule()); }
	 iv_ruleBigOrExpr=ruleBigOrExpr 
	 { $current=$iv_ruleBigOrExpr.current; } 
	 EOF 
;

// Rule BigOrExpr
ruleBigOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_K_BIG_OR_0=RULE_K_BIG_OR
    { 
    newLeafNode(this_K_BIG_OR_0, grammarAccess.getBigOrExprAccess().getK_BIG_ORTerminalRuleCall_0()); 
    }
this_P_OPEN_1=RULE_P_OPEN
    { 
    newLeafNode(this_P_OPEN_1, grammarAccess.getBigOrExprAccess().getP_OPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_2_0()); 
	    }
		lv_children_2_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigOrExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getBigOrExprAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigOrExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); 
	    }
		lv_children_4_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigOrExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_P_CLOSE_5=RULE_P_CLOSE
    { 
    newLeafNode(this_P_CLOSE_5, grammarAccess.getBigOrExprAccess().getP_CLOSETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleBigXorExpr
entryRuleBigXorExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBigXorExprRule()); }
	 iv_ruleBigXorExpr=ruleBigXorExpr 
	 { $current=$iv_ruleBigXorExpr.current; } 
	 EOF 
;

// Rule BigXorExpr
ruleBigXorExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_K_BIG_XOR_0=RULE_K_BIG_XOR
    { 
    newLeafNode(this_K_BIG_XOR_0, grammarAccess.getBigXorExprAccess().getK_BIG_XORTerminalRuleCall_0()); 
    }
this_P_OPEN_1=RULE_P_OPEN
    { 
    newLeafNode(this_P_OPEN_1, grammarAccess.getBigXorExprAccess().getP_OPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_2_0()); 
	    }
		lv_children_2_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigXorExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getBigXorExprAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigXorExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); 
	    }
		lv_children_4_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigXorExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_P_CLOSE_5=RULE_P_CLOSE
    { 
    newLeafNode(this_P_CLOSE_5, grammarAccess.getBigXorExprAccess().getP_CLOSETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleBigNandExpr
entryRuleBigNandExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBigNandExprRule()); }
	 iv_ruleBigNandExpr=ruleBigNandExpr 
	 { $current=$iv_ruleBigNandExpr.current; } 
	 EOF 
;

// Rule BigNandExpr
ruleBigNandExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_K_BIG_NAND_0=RULE_K_BIG_NAND
    { 
    newLeafNode(this_K_BIG_NAND_0, grammarAccess.getBigNandExprAccess().getK_BIG_NANDTerminalRuleCall_0()); 
    }
this_P_OPEN_1=RULE_P_OPEN
    { 
    newLeafNode(this_P_OPEN_1, grammarAccess.getBigNandExprAccess().getP_OPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_2_0()); 
	    }
		lv_children_2_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigNandExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getBigNandExprAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBigNandExprAccess().getChildrenOptionExprParserRuleCall_3_1_0()); 
	    }
		lv_children_4_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBigNandExprRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_P_CLOSE_5=RULE_P_CLOSE
    { 
    newLeafNode(this_P_CLOSE_5, grammarAccess.getBigNandExprAccess().getP_CLOSETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleOptionRef
entryRuleOptionRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRefRule()); }
	 iv_ruleOptionRef=ruleOptionRef 
	 { $current=$iv_ruleOptionRef.current; } 
	 EOF 
;

// Rule OptionRef
ruleOptionRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOptionRefAccess().getOptionOptionCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNegExpr
entryRuleNegExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegExprRule()); }
	 iv_ruleNegExpr=ruleNegExpr 
	 { $current=$iv_ruleNegExpr.current; } 
	 EOF 
;

// Rule NegExpr
ruleNegExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_K_NOT_0=RULE_K_NOT
    { 
    newLeafNode(this_K_NOT_0, grammarAccess.getNegExprAccess().getK_NOTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExprAccess().getNegOptionExprParserRuleCall_1_0()); 
	    }
		lv_neg_1_0=ruleOptionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExprRule());
	        }
       		set(
       			$current, 
       			"neg",
        		lv_neg_1_0, 
        		"de.ubt.ai1.supermod.oel.OptionLang.OptionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_P_OPEN : '(';

RULE_P_CLOSE : ')';

RULE_K_NOT : 'not';

RULE_K_AND : 'and';

RULE_K_OR : 'or';

RULE_K_XOR : 'xor';

RULE_K_IMP : 'implies';

RULE_K_IFF : 'iff';

RULE_K_MINUS : 'minus';

RULE_K_NAND : 'nand';

RULE_K_BIG_AND : 'AND';

RULE_K_BIG_OR : 'OR';

RULE_K_BIG_XOR : 'XOR';

RULE_K_BIG_NAND : 'NAND';

RULE_COMMA : ',';

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


