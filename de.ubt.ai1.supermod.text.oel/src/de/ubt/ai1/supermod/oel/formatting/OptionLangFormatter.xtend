/*
 * generated by Xtext
 */
package de.ubt.ai1.supermod.oel.formatting

import com.google.inject.Inject
import de.ubt.ai1.supermod.oel.services.OptionLangGrammarAccess
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class OptionLangFormatter extends AbstractDeclarativeFormatter {

	@Inject extension OptionLangGrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {
		c.setNoSpace.after(p_OPENRule);
		c.setNoSpace.before(p_CLOSERule);
		c.setSpace(" ").between(IDRule, k_ANDRule);
		c.setSpace(" ").between(IDRule, k_BIG_ANDRule);
		c.setSpace(" ").between(IDRule, k_BIG_NANDRule);
		c.setSpace(" ").between(IDRule, k_BIG_ORRule);
		c.setSpace(" ").between(IDRule, k_BIG_XORRule);
		c.setSpace(" ").between(IDRule, k_IFFRule);
		c.setSpace(" ").between(IDRule, k_IMPRule);
		c.setSpace(" ").between(IDRule, k_MINUSRule);
		c.setSpace(" ").between(IDRule, k_NANDRule);
		c.setSpace(" ").between(IDRule, k_NOTRule);
		c.setSpace(" ").between(IDRule, k_ORRule);
		c.setSpace(" ").between(IDRule, k_XORRule);
		c.setSpace(" ").between(k_ANDRule, IDRule);
		c.setSpace(" ").between(k_IFFRule, IDRule);
		c.setSpace(" ").between(k_IMPRule, IDRule);
		c.setSpace(" ").between(k_MINUSRule, IDRule);
		c.setSpace(" ").between(k_NANDRule, IDRule);
		c.setSpace(" ").between(k_NOTRule, IDRule);
		c.setSpace(" ").between(k_ORRule, IDRule);
		c.setSpace(" ").between(k_XORRule, IDRule);
		c.setSpace(" ").between(k_NOTRule, IDRule);
		c.setSpace(" ").between(k_NOTRule, k_ANDRule);
		c.setSpace(" ").between(k_NOTRule, k_BIG_ANDRule);
		c.setSpace(" ").between(k_NOTRule, k_BIG_NANDRule);
		c.setSpace(" ").between(k_NOTRule, k_BIG_ORRule);
		c.setSpace(" ").between(k_NOTRule, k_BIG_XORRule);
		c.setSpace(" ").between(k_NOTRule, k_IFFRule);
		c.setSpace(" ").between(k_NOTRule, k_IMPRule);
		c.setSpace(" ").between(k_NOTRule, k_MINUSRule);
		c.setSpace(" ").between(k_NOTRule, k_NANDRule);
		c.setSpace(" ").between(k_NOTRule, k_NOTRule);
		c.setSpace(" ").between(k_NOTRule, k_ORRule);
		c.setSpace(" ").between(k_NOTRule, k_XORRule);
		c.setSpace(" ").between(k_ANDRule, k_NOTRule);
		c.setSpace(" ").between(k_IFFRule, k_NOTRule);
		c.setSpace(" ").between(k_IMPRule, k_NOTRule);
		c.setSpace(" ").between(k_MINUSRule, k_NOTRule);
		c.setSpace(" ").between(k_NANDRule, k_NOTRule);
		c.setSpace(" ").between(k_NOTRule, k_NOTRule);
		c.setSpace(" ").between(k_ORRule, k_NOTRule);
		c.setSpace(" ").between(k_XORRule, k_NOTRule);		
	}
}
