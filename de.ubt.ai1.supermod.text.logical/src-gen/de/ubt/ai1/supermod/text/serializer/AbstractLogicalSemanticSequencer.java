/*
 * generated by Xtext
 */
package de.ubt.ai1.supermod.text.serializer;

import com.google.inject.Inject;
import de.ubt.ai1.supermod.mm.core.AndExpr;
import de.ubt.ai1.supermod.mm.core.BiconditionalExpr;
import de.ubt.ai1.supermod.mm.core.BigAndExpr;
import de.ubt.ai1.supermod.mm.core.BigNandExpr;
import de.ubt.ai1.supermod.mm.core.BigOrExpr;
import de.ubt.ai1.supermod.mm.core.BigXorExpr;
import de.ubt.ai1.supermod.mm.core.DefaultBinding;
import de.ubt.ai1.supermod.mm.core.ImpliesExpr;
import de.ubt.ai1.supermod.mm.core.Invariant;
import de.ubt.ai1.supermod.mm.core.MinusExpr;
import de.ubt.ai1.supermod.mm.core.NandExpr;
import de.ubt.ai1.supermod.mm.core.NegExpr;
import de.ubt.ai1.supermod.mm.core.Option;
import de.ubt.ai1.supermod.mm.core.OptionRef;
import de.ubt.ai1.supermod.mm.core.OrExpr;
import de.ubt.ai1.supermod.mm.core.Preference;
import de.ubt.ai1.supermod.mm.core.SuperModCorePackage;
import de.ubt.ai1.supermod.mm.core.XorExpr;
import de.ubt.ai1.supermod.mm.logical.LogicalDimension;
import de.ubt.ai1.supermod.mm.logical.SuperModLogicalPackage;
import de.ubt.ai1.supermod.oel.serializer.OptionLangSemanticSequencer;
import de.ubt.ai1.supermod.text.services.LogicalGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractLogicalSemanticSequencer extends OptionLangSemanticSequencer {

	@Inject
	private LogicalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SuperModCorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SuperModCorePackage.AND_EXPR:
				sequence_AndExpr(context, (AndExpr) semanticObject); 
				return; 
			case SuperModCorePackage.BICONDITIONAL_EXPR:
				sequence_BiconditionalExpr(context, (BiconditionalExpr) semanticObject); 
				return; 
			case SuperModCorePackage.BIG_AND_EXPR:
				sequence_BigAndExpr(context, (BigAndExpr) semanticObject); 
				return; 
			case SuperModCorePackage.BIG_NAND_EXPR:
				sequence_BigNandExpr(context, (BigNandExpr) semanticObject); 
				return; 
			case SuperModCorePackage.BIG_OR_EXPR:
				sequence_BigOrExpr(context, (BigOrExpr) semanticObject); 
				return; 
			case SuperModCorePackage.BIG_XOR_EXPR:
				sequence_BigXorExpr(context, (BigXorExpr) semanticObject); 
				return; 
			case SuperModCorePackage.DEFAULT_BINDING:
				sequence_DefaultBinding(context, (DefaultBinding) semanticObject); 
				return; 
			case SuperModCorePackage.IMPLIES_EXPR:
				sequence_ImpliesExpr(context, (ImpliesExpr) semanticObject); 
				return; 
			case SuperModCorePackage.INVARIANT:
				sequence_Invariant(context, (Invariant) semanticObject); 
				return; 
			case SuperModCorePackage.MINUS_EXPR:
				sequence_MinusExpr(context, (MinusExpr) semanticObject); 
				return; 
			case SuperModCorePackage.NAND_EXPR:
				sequence_NandExpr(context, (NandExpr) semanticObject); 
				return; 
			case SuperModCorePackage.NEG_EXPR:
				sequence_NegExpr(context, (NegExpr) semanticObject); 
				return; 
			case SuperModCorePackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case SuperModCorePackage.OPTION_REF:
				sequence_OptionRef(context, (OptionRef) semanticObject); 
				return; 
			case SuperModCorePackage.OR_EXPR:
				sequence_OrExpr(context, (OrExpr) semanticObject); 
				return; 
			case SuperModCorePackage.PREFERENCE:
				sequence_Preference(context, (Preference) semanticObject); 
				return; 
			case SuperModCorePackage.XOR_EXPR:
				sequence_XorExpr(context, (XorExpr) semanticObject); 
				return; 
			}
		else if (epackage == SuperModLogicalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SuperModLogicalPackage.LOGICAL_DIMENSION:
				sequence_LogicalDimension(context, (LogicalDimension) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DefaultBinding returns DefaultBinding
	 *
	 * Constraint:
	 *     (name=ID option=[Option|ID] state=Tristate)
	 */
	protected void sequence_DefaultBinding(ISerializationContext context, DefaultBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.DEFAULT_BINDING__OPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.DEFAULT_BINDING__OPTION));
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.DEFAULT_BINDING__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.DEFAULT_BINDING__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultBindingAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDefaultBindingAccess().getOptionOptionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(SuperModCorePackage.Literals.DEFAULT_BINDING__OPTION, false));
		feeder.accept(grammarAccess.getDefaultBindingAccess().getStateTristateEnumRuleCall_6_0(), semanticObject.getState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     (name=ID optionExpr=OptionExpr)
	 */
	protected void sequence_Invariant(ISerializationContext context, Invariant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.INVARIANT__OPTION_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.INVARIANT__OPTION_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvariantAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInvariantAccess().getOptionExprOptionExprParserRuleCall_3_0(), semanticObject.getOptionExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LogicalDimension returns LogicalDimension
	 *
	 * Constraint:
	 *     (dimensionName=ID (logicalOptions+=Option | logicalInvariants+=Invariant | logicalPreferences+=Preference | logicalDefaults+=DefaultBinding)*)
	 */
	protected void sequence_LogicalDimension(ISerializationContext context, LogicalDimension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOptionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Preference returns Preference
	 *
	 * Constraint:
	 *     (name=ID option=[Option|ID] optionExpr=OptionExpr)
	 */
	protected void sequence_Preference(ISerializationContext context, Preference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.RULE_BASE_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.PREFERENCE__OPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.PREFERENCE__OPTION));
			if (transientValues.isValueTransient(semanticObject, SuperModCorePackage.Literals.PREFERENCE__OPTION_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuperModCorePackage.Literals.PREFERENCE__OPTION_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPreferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPreferenceAccess().getOptionOptionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SuperModCorePackage.Literals.PREFERENCE__OPTION, false));
		feeder.accept(grammarAccess.getPreferenceAccess().getOptionExprOptionExprParserRuleCall_5_0(), semanticObject.getOptionExpr());
		feeder.finish();
	}
	
	
}
