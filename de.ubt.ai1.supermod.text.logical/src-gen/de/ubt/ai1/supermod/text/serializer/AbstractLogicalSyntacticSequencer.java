/*
 * generated by Xtext
 */
package de.ubt.ai1.supermod.text.serializer;

import com.google.inject.Inject;
import de.ubt.ai1.supermod.text.services.LogicalGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractLogicalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LogicalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_a;
	protected AbstractElementAlias match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LogicalGrammarAccess) access;
		match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExprAccess().getP_OPENTerminalRuleCall_0_0());
		match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExprAccess().getP_OPENTerminalRuleCall_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_ANDRule())
			return getK_ANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_BIG_ANDRule())
			return getK_BIG_ANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_BIG_NANDRule())
			return getK_BIG_NANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_BIG_ORRule())
			return getK_BIG_ORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_BIG_XORRule())
			return getK_BIG_XORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_IFFRule())
			return getK_IFFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_IMPRule())
			return getK_IMPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_MINUSRule())
			return getK_MINUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_NANDRule())
			return getK_NANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_NOTRule())
			return getK_NOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_ORRule())
			return getK_ORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getK_XORRule())
			return getK_XORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getP_CLOSERule())
			return getP_CLOSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getP_OPENRule())
			return getP_OPENToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMMA : ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal K_AND: 'and';
	 */
	protected String getK_ANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	/**
	 * terminal K_BIG_AND: 'AND';
	 */
	protected String getK_BIG_ANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "AND";
	}
	
	/**
	 * terminal K_BIG_NAND: 'NAND';
	 */
	protected String getK_BIG_NANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NAND";
	}
	
	/**
	 * terminal K_BIG_OR: 'OR';
	 */
	protected String getK_BIG_ORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "OR";
	}
	
	/**
	 * terminal K_BIG_XOR: 'XOR';
	 */
	protected String getK_BIG_XORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "XOR";
	}
	
	/**
	 * terminal K_IFF: 'iff';
	 */
	protected String getK_IFFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "iff";
	}
	
	/**
	 * terminal K_IMP: 'implies';
	 */
	protected String getK_IMPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "implies";
	}
	
	/**
	 * terminal K_MINUS: 'minus';
	 */
	protected String getK_MINUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "minus";
	}
	
	/**
	 * terminal K_NAND: 'nand';
	 */
	protected String getK_NANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "nand";
	}
	
	/**
	 * terminal K_NOT: 'not';
	 */
	protected String getK_NOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "not";
	}
	
	/**
	 * terminal K_OR: 'or';
	 */
	protected String getK_ORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "or";
	}
	
	/**
	 * terminal K_XOR: 'xor';
	 */
	protected String getK_XORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "xor";
	}
	
	/**
	 * terminal P_CLOSE: ')';
	 */
	protected String getP_CLOSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal P_OPEN: '(';
	 */
	protected String getP_OPENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_a.equals(syntax))
				emit_PrimaryExpr_P_OPENTerminalRuleCall_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpr_P_OPENTerminalRuleCall_0_0_p.equals(syntax))
				emit_PrimaryExpr_P_OPENTerminalRuleCall_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     P_OPEN*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) K_NOT neg=OptionExpr
	 *     (rule start) (ambiguity) option=[Option|ID]
	 *     (rule start) (ambiguity) {AndExpr.left=}
	 *     (rule start) (ambiguity) {ImpliesExpr.left=}
	 *     (rule start) (ambiguity) {MinusExpr.left=}
	 *     (rule start) (ambiguity) {NandExpr.left=}
	 *     (rule start) (ambiguity) {OrExpr.left=}
	 *     (rule start) (ambiguity) {XorExpr.left=}
	 */
	protected void emit_PrimaryExpr_P_OPENTerminalRuleCall_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     P_OPEN+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {AndExpr.left=}
	 *     (rule start) (ambiguity) {ImpliesExpr.left=}
	 *     (rule start) (ambiguity) {MinusExpr.left=}
	 *     (rule start) (ambiguity) {NandExpr.left=}
	 *     (rule start) (ambiguity) {OrExpr.left=}
	 *     (rule start) (ambiguity) {XorExpr.left=}
	 */
	protected void emit_PrimaryExpr_P_OPENTerminalRuleCall_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
