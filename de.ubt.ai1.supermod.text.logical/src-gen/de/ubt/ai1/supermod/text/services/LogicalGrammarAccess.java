/*
 * generated by Xtext
 */
package de.ubt.ai1.supermod.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.ubt.ai1.supermod.oel.services.OptionLangGrammarAccess;

@Singleton
public class LogicalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LogicalDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.LogicalDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogicalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDimensionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDimensionNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDimensionNameIDTerminalRuleCall_3_0 = (RuleCall)cDimensionNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cLogicalOptionsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cLogicalOptionsOptionParserRuleCall_5_0_0 = (RuleCall)cLogicalOptionsAssignment_5_0.eContents().get(0);
		private final Assignment cLogicalInvariantsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cLogicalInvariantsInvariantParserRuleCall_5_1_0 = (RuleCall)cLogicalInvariantsAssignment_5_1.eContents().get(0);
		private final Assignment cLogicalPreferencesAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cLogicalPreferencesPreferenceParserRuleCall_5_2_0 = (RuleCall)cLogicalPreferencesAssignment_5_2.eContents().get(0);
		private final Assignment cLogicalDefaultsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cLogicalDefaultsDefaultBindingParserRuleCall_5_3_0 = (RuleCall)cLogicalDefaultsAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LogicalDimension logical::LogicalDimension:
		//	{logical::LogicalDimension}
		//	'logical' 'dimension' dimensionName=ID
		//	'{' (logicalOptions+=Option | logicalInvariants+=Invariant | logicalPreferences+=Preference |
		//	logicalDefaults+=DefaultBinding)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{logical::LogicalDimension} 'logical' 'dimension' dimensionName=ID '{' (logicalOptions+=Option |
		//logicalInvariants+=Invariant | logicalPreferences+=Preference | logicalDefaults+=DefaultBinding)* '}'
		public Group getGroup() { return cGroup; }

		//{logical::LogicalDimension}
		public Action getLogicalDimensionAction_0() { return cLogicalDimensionAction_0; }

		//'logical'
		public Keyword getLogicalKeyword_1() { return cLogicalKeyword_1; }

		//'dimension'
		public Keyword getDimensionKeyword_2() { return cDimensionKeyword_2; }

		//dimensionName=ID
		public Assignment getDimensionNameAssignment_3() { return cDimensionNameAssignment_3; }

		//ID
		public RuleCall getDimensionNameIDTerminalRuleCall_3_0() { return cDimensionNameIDTerminalRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(logicalOptions+=Option | logicalInvariants+=Invariant | logicalPreferences+=Preference |
		//logicalDefaults+=DefaultBinding)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//logicalOptions+=Option
		public Assignment getLogicalOptionsAssignment_5_0() { return cLogicalOptionsAssignment_5_0; }

		//Option
		public RuleCall getLogicalOptionsOptionParserRuleCall_5_0_0() { return cLogicalOptionsOptionParserRuleCall_5_0_0; }

		//logicalInvariants+=Invariant
		public Assignment getLogicalInvariantsAssignment_5_1() { return cLogicalInvariantsAssignment_5_1; }

		//Invariant
		public RuleCall getLogicalInvariantsInvariantParserRuleCall_5_1_0() { return cLogicalInvariantsInvariantParserRuleCall_5_1_0; }

		//logicalPreferences+=Preference
		public Assignment getLogicalPreferencesAssignment_5_2() { return cLogicalPreferencesAssignment_5_2; }

		//Preference
		public RuleCall getLogicalPreferencesPreferenceParserRuleCall_5_2_0() { return cLogicalPreferencesPreferenceParserRuleCall_5_2_0; }

		//logicalDefaults+=DefaultBinding
		public Assignment getLogicalDefaultsAssignment_5_3() { return cLogicalDefaultsAssignment_5_3; }

		//DefaultBinding
		public RuleCall getLogicalDefaultsDefaultBindingParserRuleCall_5_3_0() { return cLogicalDefaultsDefaultBindingParserRuleCall_5_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Option core::Option:
		//	'option' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'option' name=ID
		public Group getGroup() { return cGroup; }

		//'option'
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionExprOptionExprParserRuleCall_3_0 = (RuleCall)cOptionExprAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Invariant core::Invariant:
		//	'invariant' name=ID '{'
		//	optionExpr=OptionExpr
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'invariant' name=ID '{' optionExpr=OptionExpr '}'
		public Group getGroup() { return cGroup; }

		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//optionExpr=OptionExpr
		public Assignment getOptionExprAssignment_3() { return cOptionExprAssignment_3; }

		//OptionExpr
		public RuleCall getOptionExprOptionExprParserRuleCall_3_0() { return cOptionExprOptionExprParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PreferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.Preference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOptionOptionCrossReference_3_0 = (CrossReference)cOptionAssignment_3.eContents().get(0);
		private final RuleCall cOptionOptionIDTerminalRuleCall_3_0_1 = (RuleCall)cOptionOptionCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOptionExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionExprOptionExprParserRuleCall_5_0 = (RuleCall)cOptionExprAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Preference core::Preference:
		//	'preference' name=ID 'for' option=[core::Option] '{'
		//	optionExpr=OptionExpr
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'preference' name=ID 'for' option=[core::Option] '{' optionExpr=OptionExpr '}'
		public Group getGroup() { return cGroup; }

		//'preference'
		public Keyword getPreferenceKeyword_0() { return cPreferenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//option=[core::Option]
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }

		//[core::Option]
		public CrossReference getOptionOptionCrossReference_3_0() { return cOptionOptionCrossReference_3_0; }

		//ID
		public RuleCall getOptionOptionIDTerminalRuleCall_3_0_1() { return cOptionOptionIDTerminalRuleCall_3_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//optionExpr=OptionExpr
		public Assignment getOptionExprAssignment_5() { return cOptionExprAssignment_5; }

		//OptionExpr
		public RuleCall getOptionExprOptionExprParserRuleCall_5_0() { return cOptionExprOptionExprParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DefaultBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.DefaultBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBindingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOptionOptionCrossReference_4_0 = (CrossReference)cOptionAssignment_4.eContents().get(0);
		private final RuleCall cOptionOptionIDTerminalRuleCall_4_0_1 = (RuleCall)cOptionOptionCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStateTristateEnumRuleCall_6_0 = (RuleCall)cStateAssignment_6.eContents().get(0);
		
		//DefaultBinding core::DefaultBinding:
		//	'default' 'binding' name=ID 'for' option=[core::Option] '=' state=Tristate;
		@Override public ParserRule getRule() { return rule; }

		//'default' 'binding' name=ID 'for' option=[core::Option] '=' state=Tristate
		public Group getGroup() { return cGroup; }

		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//'binding'
		public Keyword getBindingKeyword_1() { return cBindingKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//option=[core::Option]
		public Assignment getOptionAssignment_4() { return cOptionAssignment_4; }

		//[core::Option]
		public CrossReference getOptionOptionCrossReference_4_0() { return cOptionOptionCrossReference_4_0; }

		//ID
		public RuleCall getOptionOptionIDTerminalRuleCall_4_0_1() { return cOptionOptionIDTerminalRuleCall_4_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//state=Tristate
		public Assignment getStateAssignment_6() { return cStateAssignment_6; }

		//Tristate
		public RuleCall getStateTristateEnumRuleCall_6_0() { return cStateTristateEnumRuleCall_6_0; }
	}
	
	
	public class TristateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.supermod.text.Logical.Tristate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnknownUnknownKeyword_0_0 = (Keyword)cUnknownEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFalseFalseKeyword_2_0 = (Keyword)cFalseEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Tristate returns core::Tristate:
		//	unknown | ^true | ^false;
		public EnumRule getRule() { return rule; }

		//unknown | ^true | ^false
		public Alternatives getAlternatives() { return cAlternatives; }

		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_0() { return cUnknownEnumLiteralDeclaration_0; }

		//'unknown'
		public Keyword getUnknownUnknownKeyword_0_0() { return cUnknownUnknownKeyword_0_0; }

		//^true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }

		//'true'
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }

		//^false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_2() { return cFalseEnumLiteralDeclaration_2; }

		//'false'
		public Keyword getFalseFalseKeyword_2_0() { return cFalseFalseKeyword_2_0; }
	}
	
	private final LogicalDimensionElements pLogicalDimension;
	private final OptionElements pOption;
	private final InvariantElements pInvariant;
	private final PreferenceElements pPreference;
	private final DefaultBindingElements pDefaultBinding;
	private final TristateElements eTristate;
	
	private final Grammar grammar;

	private final OptionLangGrammarAccess gaOptionLang;

	@Inject
	public LogicalGrammarAccess(GrammarProvider grammarProvider,
		OptionLangGrammarAccess gaOptionLang) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaOptionLang = gaOptionLang;
		this.pLogicalDimension = new LogicalDimensionElements();
		this.pOption = new OptionElements();
		this.pInvariant = new InvariantElements();
		this.pPreference = new PreferenceElements();
		this.pDefaultBinding = new DefaultBindingElements();
		this.eTristate = new TristateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.ubt.ai1.supermod.text.Logical".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public OptionLangGrammarAccess getOptionLangGrammarAccess() {
		return gaOptionLang;
	}

	
	//LogicalDimension logical::LogicalDimension:
	//	{logical::LogicalDimension}
	//	'logical' 'dimension' dimensionName=ID
	//	'{' (logicalOptions+=Option | logicalInvariants+=Invariant | logicalPreferences+=Preference |
	//	logicalDefaults+=DefaultBinding)*
	//	'}';
	public LogicalDimensionElements getLogicalDimensionAccess() {
		return pLogicalDimension;
	}
	
	public ParserRule getLogicalDimensionRule() {
		return getLogicalDimensionAccess().getRule();
	}

	//Option core::Option:
	//	'option' name=ID;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//Invariant core::Invariant:
	//	'invariant' name=ID '{'
	//	optionExpr=OptionExpr
	//	'}';
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}

	//Preference core::Preference:
	//	'preference' name=ID 'for' option=[core::Option] '{'
	//	optionExpr=OptionExpr
	//	'}';
	public PreferenceElements getPreferenceAccess() {
		return pPreference;
	}
	
	public ParserRule getPreferenceRule() {
		return getPreferenceAccess().getRule();
	}

	//DefaultBinding core::DefaultBinding:
	//	'default' 'binding' name=ID 'for' option=[core::Option] '=' state=Tristate;
	public DefaultBindingElements getDefaultBindingAccess() {
		return pDefaultBinding;
	}
	
	public ParserRule getDefaultBindingRule() {
		return getDefaultBindingAccess().getRule();
	}

	//enum Tristate returns core::Tristate:
	//	unknown | ^true | ^false;
	public TristateElements getTristateAccess() {
		return eTristate;
	}
	
	public EnumRule getTristateRule() {
		return getTristateAccess().getRule();
	}

	//OptionExpr core::OptionExpr:
	//	BiconditionalExpr | BigExpr;
	public OptionLangGrammarAccess.OptionExprElements getOptionExprAccess() {
		return gaOptionLang.getOptionExprAccess();
	}
	
	public ParserRule getOptionExprRule() {
		return getOptionExprAccess().getRule();
	}

	//BiconditionalExpr core::OptionExpr:
	//	ImpliesExpr ({core::BiconditionalExpr.left=current} K_IFF right=BiconditionalExpr)*;
	public OptionLangGrammarAccess.BiconditionalExprElements getBiconditionalExprAccess() {
		return gaOptionLang.getBiconditionalExprAccess();
	}
	
	public ParserRule getBiconditionalExprRule() {
		return getBiconditionalExprAccess().getRule();
	}

	//ImpliesExpr core::OptionExpr:
	//	OrExpr ({core::ImpliesExpr.left=current} K_IMP right=OrExpr)*;
	public OptionLangGrammarAccess.ImpliesExprElements getImpliesExprAccess() {
		return gaOptionLang.getImpliesExprAccess();
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr core::OptionExpr:
	//	XorExpr ({core::OrExpr.left=current} K_OR right=XorExpr)*;
	public OptionLangGrammarAccess.OrExprElements getOrExprAccess() {
		return gaOptionLang.getOrExprAccess();
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//XorExpr core::OptionExpr:
	//	MinusExpr ({core::XorExpr.left=current} K_XOR right=MinusExpr)*;
	public OptionLangGrammarAccess.XorExprElements getXorExprAccess() {
		return gaOptionLang.getXorExprAccess();
	}
	
	public ParserRule getXorExprRule() {
		return getXorExprAccess().getRule();
	}

	//MinusExpr core::OptionExpr:
	//	NandExpr ({core::MinusExpr.left=current} K_MINUS right=NandExpr)*;
	public OptionLangGrammarAccess.MinusExprElements getMinusExprAccess() {
		return gaOptionLang.getMinusExprAccess();
	}
	
	public ParserRule getMinusExprRule() {
		return getMinusExprAccess().getRule();
	}

	//NandExpr core::OptionExpr:
	//	AndExpr ({core::NandExpr.left=current} K_NAND right=AndExpr)*;
	public OptionLangGrammarAccess.NandExprElements getNandExprAccess() {
		return gaOptionLang.getNandExprAccess();
	}
	
	public ParserRule getNandExprRule() {
		return getNandExprAccess().getRule();
	}

	//AndExpr core::OptionExpr:
	//	PrimaryExpr ({core::AndExpr.left=current} K_AND right=PrimaryExpr)*;
	public OptionLangGrammarAccess.AndExprElements getAndExprAccess() {
		return gaOptionLang.getAndExprAccess();
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//PrimaryExpr core::OptionExpr:
	//	P_OPEN ImpliesExpr P_CLOSE | OptionRef | NegExpr;
	public OptionLangGrammarAccess.PrimaryExprElements getPrimaryExprAccess() {
		return gaOptionLang.getPrimaryExprAccess();
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}

	//BigExpr core::BigExpr:
	//	BigAndExpr | BigOrExpr | BigXorExpr | BigNandExpr;
	public OptionLangGrammarAccess.BigExprElements getBigExprAccess() {
		return gaOptionLang.getBigExprAccess();
	}
	
	public ParserRule getBigExprRule() {
		return getBigExprAccess().getRule();
	}

	//BigAndExpr core::BigAndExpr:
	//	K_BIG_AND P_OPEN children+=OptionExpr (COMMA children+=OptionExpr)* P_CLOSE;
	public OptionLangGrammarAccess.BigAndExprElements getBigAndExprAccess() {
		return gaOptionLang.getBigAndExprAccess();
	}
	
	public ParserRule getBigAndExprRule() {
		return getBigAndExprAccess().getRule();
	}

	//BigOrExpr core::BigOrExpr:
	//	K_BIG_OR P_OPEN children+=OptionExpr (COMMA children+=OptionExpr)* P_CLOSE;
	public OptionLangGrammarAccess.BigOrExprElements getBigOrExprAccess() {
		return gaOptionLang.getBigOrExprAccess();
	}
	
	public ParserRule getBigOrExprRule() {
		return getBigOrExprAccess().getRule();
	}

	//BigXorExpr core::BigXorExpr:
	//	K_BIG_XOR P_OPEN children+=OptionExpr (COMMA children+=OptionExpr)* P_CLOSE;
	public OptionLangGrammarAccess.BigXorExprElements getBigXorExprAccess() {
		return gaOptionLang.getBigXorExprAccess();
	}
	
	public ParserRule getBigXorExprRule() {
		return getBigXorExprAccess().getRule();
	}

	//BigNandExpr core::BigNandExpr:
	//	K_BIG_NAND P_OPEN children+=OptionExpr (COMMA children+=OptionExpr)* P_CLOSE;
	public OptionLangGrammarAccess.BigNandExprElements getBigNandExprAccess() {
		return gaOptionLang.getBigNandExprAccess();
	}
	
	public ParserRule getBigNandExprRule() {
		return getBigNandExprAccess().getRule();
	}

	//OptionRef core::OptionRef:
	//	option=[core::Option];
	public OptionLangGrammarAccess.OptionRefElements getOptionRefAccess() {
		return gaOptionLang.getOptionRefAccess();
	}
	
	public ParserRule getOptionRefRule() {
		return getOptionRefAccess().getRule();
	}

	//NegExpr core::NegExpr:
	//	K_NOT neg=OptionExpr;
	public OptionLangGrammarAccess.NegExprElements getNegExprAccess() {
		return gaOptionLang.getNegExprAccess();
	}
	
	public ParserRule getNegExprRule() {
		return getNegExprAccess().getRule();
	}

	//terminal P_OPEN:
	//	'(';
	public TerminalRule getP_OPENRule() {
		return gaOptionLang.getP_OPENRule();
	} 

	//terminal P_CLOSE:
	//	')';
	public TerminalRule getP_CLOSERule() {
		return gaOptionLang.getP_CLOSERule();
	} 

	//terminal K_NOT:
	//	'not';
	public TerminalRule getK_NOTRule() {
		return gaOptionLang.getK_NOTRule();
	} 

	//terminal K_AND:
	//	'and';
	public TerminalRule getK_ANDRule() {
		return gaOptionLang.getK_ANDRule();
	} 

	//terminal K_OR:
	//	'or';
	public TerminalRule getK_ORRule() {
		return gaOptionLang.getK_ORRule();
	} 

	//terminal K_XOR:
	//	'xor';
	public TerminalRule getK_XORRule() {
		return gaOptionLang.getK_XORRule();
	} 

	//terminal K_IMP:
	//	'implies';
	public TerminalRule getK_IMPRule() {
		return gaOptionLang.getK_IMPRule();
	} 

	//terminal K_IFF:
	//	'iff';
	public TerminalRule getK_IFFRule() {
		return gaOptionLang.getK_IFFRule();
	} 

	//terminal K_MINUS:
	//	'minus';
	public TerminalRule getK_MINUSRule() {
		return gaOptionLang.getK_MINUSRule();
	} 

	//terminal K_NAND:
	//	'nand';
	public TerminalRule getK_NANDRule() {
		return gaOptionLang.getK_NANDRule();
	} 

	//terminal K_BIG_AND:
	//	'AND';
	public TerminalRule getK_BIG_ANDRule() {
		return gaOptionLang.getK_BIG_ANDRule();
	} 

	//terminal K_BIG_OR:
	//	'OR';
	public TerminalRule getK_BIG_ORRule() {
		return gaOptionLang.getK_BIG_ORRule();
	} 

	//terminal K_BIG_XOR:
	//	'XOR';
	public TerminalRule getK_BIG_XORRule() {
		return gaOptionLang.getK_BIG_XORRule();
	} 

	//terminal K_BIG_NAND:
	//	'NAND';
	public TerminalRule getK_BIG_NANDRule() {
		return gaOptionLang.getK_BIG_NANDRule();
	} 

	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return gaOptionLang.getCOMMARule();
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_' | '-') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaOptionLang.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaOptionLang.getWSRule();
	} 
}
