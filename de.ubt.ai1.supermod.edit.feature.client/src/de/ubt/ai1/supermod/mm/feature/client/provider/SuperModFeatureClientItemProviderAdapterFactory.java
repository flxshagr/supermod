/**
 */
package de.ubt.ai1.supermod.mm.feature.client.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.ubt.ai1.supermod.mm.feature.client.util.SuperModFeatureClientAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SuperModFeatureClientItemProviderAdapterFactory extends SuperModFeatureClientAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SuperModFeatureClientItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.SingleVersionFeatureModelDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleVersionFeatureModelDescriptorItemProvider singleVersionFeatureModelDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.SingleVersionFeatureModelDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleVersionFeatureModelDescriptorAdapter() {
		if (singleVersionFeatureModelDescriptorItemProvider == null) {
			singleVersionFeatureModelDescriptorItemProvider = new SingleVersionFeatureModelDescriptorItemProvider(this);
		}

		return singleVersionFeatureModelDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.RootFeatureConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootFeatureConflictItemProvider rootFeatureConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.RootFeatureConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootFeatureConflictAdapter() {
		if (rootFeatureConflictItemProvider == null) {
			rootFeatureConflictItemProvider = new RootFeatureConflictItemProvider(this);
		}

		return rootFeatureConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.ParentFeatureConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParentFeatureConflictItemProvider parentFeatureConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.ParentFeatureConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParentFeatureConflictAdapter() {
		if (parentFeatureConflictItemProvider == null) {
			parentFeatureConflictItemProvider = new ParentFeatureConflictItemProvider(this);
		}

		return parentFeatureConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.CyclicFeatureTreeConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CyclicFeatureTreeConflictItemProvider cyclicFeatureTreeConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.CyclicFeatureTreeConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCyclicFeatureTreeConflictAdapter() {
		if (cyclicFeatureTreeConflictItemProvider == null) {
			cyclicFeatureTreeConflictItemProvider = new CyclicFeatureTreeConflictItemProvider(this);
		}

		return cyclicFeatureTreeConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.NonOptionalGroupedFeatureConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonOptionalGroupedFeatureConflictItemProvider nonOptionalGroupedFeatureConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.NonOptionalGroupedFeatureConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonOptionalGroupedFeatureConflictAdapter() {
		if (nonOptionalGroupedFeatureConflictItemProvider == null) {
			nonOptionalGroupedFeatureConflictItemProvider = new NonOptionalGroupedFeatureConflictItemProvider(this);
		}

		return nonOptionalGroupedFeatureConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.DependencyLinkTargetConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyLinkTargetConflictItemProvider dependencyLinkTargetConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.DependencyLinkTargetConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyLinkTargetConflictAdapter() {
		if (dependencyLinkTargetConflictItemProvider == null) {
			dependencyLinkTargetConflictItemProvider = new DependencyLinkTargetConflictItemProvider(this);
		}

		return dependencyLinkTargetConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.DanglingFeatureConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DanglingFeatureConflictItemProvider danglingFeatureConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.DanglingFeatureConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDanglingFeatureConflictAdapter() {
		if (danglingFeatureConflictItemProvider == null) {
			danglingFeatureConflictItemProvider = new DanglingFeatureConflictItemProvider(this);
		}

		return danglingFeatureConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.DanglingGroupConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DanglingGroupConflictItemProvider danglingGroupConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.DanglingGroupConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDanglingGroupConflictAdapter() {
		if (danglingGroupConflictItemProvider == null) {
			danglingGroupConflictItemProvider = new DanglingGroupConflictItemProvider(this);
		}

		return danglingGroupConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.DanglingDependencyConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DanglingDependencyConflictItemProvider danglingDependencyConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.DanglingDependencyConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDanglingDependencyConflictAdapter() {
		if (danglingDependencyConflictItemProvider == null) {
			danglingDependencyConflictItemProvider = new DanglingDependencyConflictItemProvider(this);
		}

		return danglingDependencyConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.DisplayNameConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayNameConflictItemProvider displayNameConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.DisplayNameConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayNameConflictAdapter() {
		if (displayNameConflictItemProvider == null) {
			displayNameConflictItemProvider = new DisplayNameConflictItemProvider(this);
		}

		return displayNameConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.MultipleGroupMembershipConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleGroupMembershipConflictItemProvider multipleGroupMembershipConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.MultipleGroupMembershipConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleGroupMembershipConflictAdapter() {
		if (multipleGroupMembershipConflictItemProvider == null) {
			multipleGroupMembershipConflictItemProvider = new MultipleGroupMembershipConflictItemProvider(this);
		}

		return multipleGroupMembershipConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.RemoteGroupMembershipConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoteGroupMembershipConflictItemProvider remoteGroupMembershipConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.RemoteGroupMembershipConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoteGroupMembershipConflictAdapter() {
		if (remoteGroupMembershipConflictItemProvider == null) {
			remoteGroupMembershipConflictItemProvider = new RemoteGroupMembershipConflictItemProvider(this);
		}

		return remoteGroupMembershipConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.FeatureConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureConfigurationItemProvider featureConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.FeatureConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureConfigurationAdapter() {
		if (featureConfigurationItemProvider == null) {
			featureConfigurationItemProvider = new FeatureConfigurationItemProvider(this);
		}

		return featureConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.client.FeatureModelExportTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureModelExportTraceItemProvider featureModelExportTraceItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.client.FeatureModelExportTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureModelExportTraceAdapter() {
		if (featureModelExportTraceItemProvider == null) {
			featureModelExportTraceItemProvider = new FeatureModelExportTraceItemProvider(this);
		}

		return featureModelExportTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureToFeatureMapEntryItemProvider featureToFeatureMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureToFeatureMapEntryAdapter() {
		if (featureToFeatureMapEntryItemProvider == null) {
			featureToFeatureMapEntryItemProvider = new FeatureToFeatureMapEntryItemProvider(this);
		}

		return featureToFeatureMapEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rootFeatureConflictItemProvider != null) rootFeatureConflictItemProvider.dispose();
		if (parentFeatureConflictItemProvider != null) parentFeatureConflictItemProvider.dispose();
		if (cyclicFeatureTreeConflictItemProvider != null) cyclicFeatureTreeConflictItemProvider.dispose();
		if (displayNameConflictItemProvider != null) displayNameConflictItemProvider.dispose();
		if (multipleGroupMembershipConflictItemProvider != null) multipleGroupMembershipConflictItemProvider.dispose();
		if (remoteGroupMembershipConflictItemProvider != null) remoteGroupMembershipConflictItemProvider.dispose();
		if (nonOptionalGroupedFeatureConflictItemProvider != null) nonOptionalGroupedFeatureConflictItemProvider.dispose();
		if (dependencyLinkTargetConflictItemProvider != null) dependencyLinkTargetConflictItemProvider.dispose();
		if (danglingFeatureConflictItemProvider != null) danglingFeatureConflictItemProvider.dispose();
		if (danglingGroupConflictItemProvider != null) danglingGroupConflictItemProvider.dispose();
		if (danglingDependencyConflictItemProvider != null) danglingDependencyConflictItemProvider.dispose();
		if (singleVersionFeatureModelDescriptorItemProvider != null) singleVersionFeatureModelDescriptorItemProvider.dispose();
		if (featureConfigurationItemProvider != null) featureConfigurationItemProvider.dispose();
		if (featureModelExportTraceItemProvider != null) featureModelExportTraceItemProvider.dispose();
		if (featureToFeatureMapEntryItemProvider != null) featureToFeatureMapEntryItemProvider.dispose();
	}

}
