/******************************************************************************
 * Copyright (c) 2014 Chair for Applied Computer Science I, University of 
 * Bayreuth. All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html 
 *****************************************************************************/
package de.ubt.ai1.supermod.mm.core.provider;

import java.util.ArrayList;
import java.util.Collection;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import de.ubt.ai1.supermod.mm.core.util.SuperModCoreAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * @author 	Felix Schwaegerl <felix.schwaegerl(at)uni(minus)bayreuth(dot)de>
 * @version	0.1.0
 * @since	0.1.0
 * @date 	2014-07-28
 * <!-- end-user-doc -->
 * @generated
 */
public class SuperModCoreItemProviderAdapterFactory extends SuperModCoreAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public SuperModCoreItemProviderAdapterFactory() {
//		supportedTypes.add(IUpdateableItemText.class);
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.Repository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryItemProvider repositoryItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.Repository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryAdapter() {
		if (repositoryItemProvider == null) {
			repositoryItemProvider = new RepositoryItemProvider(this);
		}

		return repositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.VisibilityForest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityForestItemProvider visibilityForestItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.VisibilityForest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityForestAdapter() {
		if (visibilityForestItemProvider == null) {
			visibilityForestItemProvider = new VisibilityForestItemProvider(this);
		}

		return visibilityForestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.Visibility} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityItemProvider visibilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.Visibility}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityAdapter() {
		if (visibilityItemProvider == null) {
			visibilityItemProvider = new VisibilityItemProvider(this);
		}

		return visibilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.VisibilityRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityRefItemProvider visibilityRefItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.VisibilityRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityRefAdapter() {
		if (visibilityRefItemProvider == null) {
			visibilityRefItemProvider = new VisibilityRefItemProvider(this);
		}

		return visibilityRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.ProductSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductSpaceItemProvider productSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.ProductSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductSpaceAdapter() {
		if (productSpaceItemProvider == null) {
			productSpaceItemProvider = new ProductSpaceItemProvider(this);
		}

		return productSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.VersionSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionSpaceItemProvider versionSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.VersionSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionSpaceAdapter() {
		if (versionSpaceItemProvider == null) {
			versionSpaceItemProvider = new VersionSpaceItemProvider(this);
		}

		return versionSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.Invariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvariantItemProvider invariantItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.Invariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvariantAdapter() {
		if (invariantItemProvider == null) {
			invariantItemProvider = new InvariantItemProvider(this);
		}

		return invariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.Preference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreferenceItemProvider preferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.Preference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreferenceAdapter() {
		if (preferenceItemProvider == null) {
			preferenceItemProvider = new PreferenceItemProvider(this);
		}

		return preferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.DefaultBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultBindingItemProvider defaultBindingItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.DefaultBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultBindingAdapter() {
		if (defaultBindingItemProvider == null) {
			defaultBindingItemProvider = new DefaultBindingItemProvider(this);
		}

		return defaultBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.OptionBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionBindingItemProvider optionBindingItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.OptionBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionBindingAdapter() {
		if (optionBindingItemProvider == null) {
			optionBindingItemProvider = new OptionBindingItemProvider(this);
		}

		return optionBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionToTristateMapEntryItemProvider optionToTristateMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionToTristateMapEntryAdapter() {
		if (optionToTristateMapEntryItemProvider == null) {
			optionToTristateMapEntryItemProvider = new OptionToTristateMapEntryItemProvider(this);
		}

		return optionToTristateMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.VisibilityEvaluationCache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityEvaluationCacheItemProvider visibilityEvaluationCacheItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.VisibilityEvaluationCache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityEvaluationCacheAdapter() {
		if (visibilityEvaluationCacheItemProvider == null) {
			visibilityEvaluationCacheItemProvider = new VisibilityEvaluationCacheItemProvider(this);
		}

		return visibilityEvaluationCacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionExprToTristateMapEntryItemProvider optionExprToTristateMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionExprToTristateMapEntryAdapter() {
		if (optionExprToTristateMapEntryItemProvider == null) {
			optionExprToTristateMapEntryItemProvider = new OptionExprToTristateMapEntryItemProvider(this);
		}

		return optionExprToTristateMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.OptionRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionRefItemProvider optionRefItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.OptionRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionRefAdapter() {
		if (optionRefItemProvider == null) {
			optionRefItemProvider = new OptionRefItemProvider(this);
		}

		return optionRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.NegExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegExprItemProvider negExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.NegExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegExprAdapter() {
		if (negExprItemProvider == null) {
			negExprItemProvider = new NegExprItemProvider(this);
		}

		return negExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.AndExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndExprItemProvider andExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.AndExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndExprAdapter() {
		if (andExprItemProvider == null) {
			andExprItemProvider = new AndExprItemProvider(this);
		}

		return andExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.OrExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrExprItemProvider orExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.OrExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrExprAdapter() {
		if (orExprItemProvider == null) {
			orExprItemProvider = new OrExprItemProvider(this);
		}

		return orExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.XorExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XorExprItemProvider xorExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.XorExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXorExprAdapter() {
		if (xorExprItemProvider == null) {
			xorExprItemProvider = new XorExprItemProvider(this);
		}

		return xorExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.ImpliesExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImpliesExprItemProvider impliesExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.ImpliesExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImpliesExprAdapter() {
		if (impliesExprItemProvider == null) {
			impliesExprItemProvider = new ImpliesExprItemProvider(this);
		}

		return impliesExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.BiconditionalExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BiconditionalExprItemProvider biconditionalExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.BiconditionalExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBiconditionalExprAdapter() {
		if (biconditionalExprItemProvider == null) {
			biconditionalExprItemProvider = new BiconditionalExprItemProvider(this);
		}

		return biconditionalExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.NandExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NandExprItemProvider nandExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.NandExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNandExprAdapter() {
		if (nandExprItemProvider == null) {
			nandExprItemProvider = new NandExprItemProvider(this);
		}

		return nandExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.MinusExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinusExprItemProvider minusExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.MinusExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinusExprAdapter() {
		if (minusExprItemProvider == null) {
			minusExprItemProvider = new MinusExprItemProvider(this);
		}

		return minusExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.MergeExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeExprItemProvider mergeExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.MergeExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeExprAdapter() {
		if (mergeExprItemProvider == null) {
			mergeExprItemProvider = new MergeExprItemProvider(this);
		}

		return mergeExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.BigAndExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BigAndExprItemProvider bigAndExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.BigAndExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBigAndExprAdapter() {
		if (bigAndExprItemProvider == null) {
			bigAndExprItemProvider = new BigAndExprItemProvider(this);
		}

		return bigAndExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.BigOrExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BigOrExprItemProvider bigOrExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.BigOrExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBigOrExprAdapter() {
		if (bigOrExprItemProvider == null) {
			bigOrExprItemProvider = new BigOrExprItemProvider(this);
		}

		return bigOrExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.BigXorExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BigXorExprItemProvider bigXorExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.BigXorExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBigXorExprAdapter() {
		if (bigXorExprItemProvider == null) {
			bigXorExprItemProvider = new BigXorExprItemProvider(this);
		}

		return bigXorExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.core.BigNandExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BigNandExprItemProvider bigNandExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.core.BigNandExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBigNandExprAdapter() {
		if (bigNandExprItemProvider == null) {
			bigNandExprItemProvider = new BigNandExprItemProvider(this);
		}

		return bigNandExprItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (repositoryItemProvider != null) repositoryItemProvider.dispose();
		if (productSpaceItemProvider != null) productSpaceItemProvider.dispose();
		if (versionSpaceItemProvider != null) versionSpaceItemProvider.dispose();
		if (invariantItemProvider != null) invariantItemProvider.dispose();
		if (preferenceItemProvider != null) preferenceItemProvider.dispose();
		if (defaultBindingItemProvider != null) defaultBindingItemProvider.dispose();
		if (optionItemProvider != null) optionItemProvider.dispose();
		if (optionBindingItemProvider != null) optionBindingItemProvider.dispose();
		if (optionToTristateMapEntryItemProvider != null) optionToTristateMapEntryItemProvider.dispose();
		if (visibilityEvaluationCacheItemProvider != null) visibilityEvaluationCacheItemProvider.dispose();
		if (optionExprToTristateMapEntryItemProvider != null) optionExprToTristateMapEntryItemProvider.dispose();
		if (visibilityForestItemProvider != null) visibilityForestItemProvider.dispose();
		if (visibilityItemProvider != null) visibilityItemProvider.dispose();
		if (visibilityRefItemProvider != null) visibilityRefItemProvider.dispose();
		if (optionRefItemProvider != null) optionRefItemProvider.dispose();
		if (negExprItemProvider != null) negExprItemProvider.dispose();
		if (andExprItemProvider != null) andExprItemProvider.dispose();
		if (orExprItemProvider != null) orExprItemProvider.dispose();
		if (xorExprItemProvider != null) xorExprItemProvider.dispose();
		if (impliesExprItemProvider != null) impliesExprItemProvider.dispose();
		if (biconditionalExprItemProvider != null) biconditionalExprItemProvider.dispose();
		if (nandExprItemProvider != null) nandExprItemProvider.dispose();
		if (minusExprItemProvider != null) minusExprItemProvider.dispose();
		if (mergeExprItemProvider != null) mergeExprItemProvider.dispose();
		if (bigAndExprItemProvider != null) bigAndExprItemProvider.dispose();
		if (bigOrExprItemProvider != null) bigOrExprItemProvider.dispose();
		if (bigXorExprItemProvider != null) bigXorExprItemProvider.dispose();
		if (bigNandExprItemProvider != null) bigNandExprItemProvider.dispose();
	}

}
