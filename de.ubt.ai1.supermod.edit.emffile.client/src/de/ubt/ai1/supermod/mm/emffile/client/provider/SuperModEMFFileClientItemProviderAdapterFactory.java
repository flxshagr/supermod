/**
 * Copyright (c) 2014 Chair for Applied Computer Science I, University of 
 * Bayreuth. All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package de.ubt.ai1.supermod.mm.emffile.client.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.ubt.ai1.supermod.mm.emffile.client.util.SuperModEMFFileClientAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SuperModEMFFileClientItemProviderAdapterFactory extends SuperModEMFFileClientAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SuperModEMFFileClientItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectClassConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFObjectClassConflictItemProvider emfObjectClassConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectClassConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFObjectClassConflictAdapter() {
		if (emfObjectClassConflictItemProvider == null) {
			emfObjectClassConflictItemProvider = new EMFObjectClassConflictItemProvider(this);
		}

		return emfObjectClassConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFClassDefinitionConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFClassDefinitionConflictItemProvider emfClassDefinitionConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFClassDefinitionConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFClassDefinitionConflictAdapter() {
		if (emfClassDefinitionConflictItemProvider == null) {
			emfClassDefinitionConflictItemProvider = new EMFClassDefinitionConflictItemProvider(this);
		}

		return emfClassDefinitionConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFFeatureCompatibilityConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFFeatureCompatibilityConflictItemProvider emfFeatureCompatibilityConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFFeatureCompatibilityConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFFeatureCompatibilityConflictAdapter() {
		if (emfFeatureCompatibilityConflictItemProvider == null) {
			emfFeatureCompatibilityConflictItemProvider = new EMFFeatureCompatibilityConflictItemProvider(this);
		}

		return emfFeatureCompatibilityConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectContainerConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFObjectContainerConflictItemProvider emfObjectContainerConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectContainerConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFObjectContainerConflictAdapter() {
		if (emfObjectContainerConflictItemProvider == null) {
			emfObjectContainerConflictItemProvider = new EMFObjectContainerConflictItemProvider(this);
		}

		return emfObjectContainerConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFCyclicContainmentConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFCyclicContainmentConflictItemProvider emfCyclicContainmentConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFCyclicContainmentConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFCyclicContainmentConflictAdapter() {
		if (emfCyclicContainmentConflictItemProvider == null) {
			emfCyclicContainmentConflictItemProvider = new EMFCyclicContainmentConflictItemProvider(this);
		}

		return emfCyclicContainmentConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFSingleFeatureValueConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFSingleFeatureValueConflictItemProvider emfSingleFeatureValueConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFSingleFeatureValueConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFSingleFeatureValueConflictAdapter() {
		if (emfSingleFeatureValueConflictItemProvider == null) {
			emfSingleFeatureValueConflictItemProvider = new EMFSingleFeatureValueConflictItemProvider(this);
		}

		return emfSingleFeatureValueConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFMultiFeatureValueConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFMultiFeatureValueConflictItemProvider emfMultiFeatureValueConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFMultiFeatureValueConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFMultiFeatureValueConflictAdapter() {
		if (emfMultiFeatureValueConflictItemProvider == null) {
			emfMultiFeatureValueConflictItemProvider = new EMFMultiFeatureValueConflictItemProvider(this);
		}

		return emfMultiFeatureValueConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFLinkCompatibilityConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFLinkCompatibilityConflictItemProvider emfLinkCompatibilityConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFLinkCompatibilityConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFLinkCompatibilityConflictAdapter() {
		if (emfLinkCompatibilityConflictItemProvider == null) {
			emfLinkCompatibilityConflictItemProvider = new EMFLinkCompatibilityConflictItemProvider(this);
		}

		return emfLinkCompatibilityConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectDefinitionConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFObjectDefinitionConflictItemProvider emfObjectDefinitionConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFObjectDefinitionConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFObjectDefinitionConflictAdapter() {
		if (emfObjectDefinitionConflictItemProvider == null) {
			emfObjectDefinitionConflictItemProvider = new EMFObjectDefinitionConflictItemProvider(this);
		}

		return emfObjectDefinitionConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFReferentialIntegrityConflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFReferentialIntegrityConflictItemProvider emfReferentialIntegrityConflictItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFReferentialIntegrityConflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFReferentialIntegrityConflictAdapter() {
		if (emfReferentialIntegrityConflictItemProvider == null) {
			emfReferentialIntegrityConflictItemProvider = new EMFReferentialIntegrityConflictItemProvider(this);
		}

		return emfReferentialIntegrityConflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.emffile.client.EMFFileExportTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFFileExportTraceItemProvider emfFileExportTraceItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.emffile.client.EMFFileExportTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFFileExportTraceAdapter() {
		if (emfFileExportTraceItemProvider == null) {
			emfFileExportTraceItemProvider = new EMFFileExportTraceItemProvider(this);
		}

		return emfFileExportTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFObjectToEObjectMapEntryItemProvider emfObjectToEObjectMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFObjectToEObjectMapEntryAdapter() {
		if (emfObjectToEObjectMapEntryItemProvider == null) {
			emfObjectToEObjectMapEntryItemProvider = new EMFObjectToEObjectMapEntryItemProvider(this);
		}

		return emfObjectToEObjectMapEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (emfObjectClassConflictItemProvider != null) emfObjectClassConflictItemProvider.dispose();
		if (emfClassDefinitionConflictItemProvider != null) emfClassDefinitionConflictItemProvider.dispose();
		if (emfFeatureCompatibilityConflictItemProvider != null) emfFeatureCompatibilityConflictItemProvider.dispose();
		if (emfObjectContainerConflictItemProvider != null) emfObjectContainerConflictItemProvider.dispose();
		if (emfCyclicContainmentConflictItemProvider != null) emfCyclicContainmentConflictItemProvider.dispose();
		if (emfSingleFeatureValueConflictItemProvider != null) emfSingleFeatureValueConflictItemProvider.dispose();
		if (emfMultiFeatureValueConflictItemProvider != null) emfMultiFeatureValueConflictItemProvider.dispose();
		if (emfLinkCompatibilityConflictItemProvider != null) emfLinkCompatibilityConflictItemProvider.dispose();
		if (emfObjectDefinitionConflictItemProvider != null) emfObjectDefinitionConflictItemProvider.dispose();
		if (emfReferentialIntegrityConflictItemProvider != null) emfReferentialIntegrityConflictItemProvider.dispose();
		if (emfFileExportTraceItemProvider != null) emfFileExportTraceItemProvider.dispose();
		if (emfObjectToEObjectMapEntryItemProvider != null) emfObjectToEObjectMapEntryItemProvider.dispose();
	}

}
