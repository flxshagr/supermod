/******************************************************************************
 * Copyright (c) 2014 Chair for Applied Computer Science I, University of 
 * Bayreuth. All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html 
 *****************************************************************************/
package de.ubt.ai1.supermod.mm.feature.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.IUpdateableItemText;

import de.ubt.ai1.supermod.mm.feature.util.SuperModFeatureAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * @author 	Felix Schwaegerl <felix.schwaegerl(at)uni(minus)bayreuth(dot)de>
 * @version	0.1.0
 * @since	0.1.0
 * @date 	2014-07-28
 * <!-- end-user-doc -->
 * @generated
 */
public class SuperModFeatureItemProviderAdapterFactory extends SuperModFeatureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public SuperModFeatureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IUpdateableItemText.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.FeatureModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureModelItemProvider featureModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.FeatureModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureModelAdapter() {
		if (featureModelItemProvider == null) {
			featureModelItemProvider = new FeatureModelItemProvider(this);
		}

		return featureModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.DisplayName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayNameItemProvider displayNameItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.DisplayName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayNameAdapter() {
		if (displayNameItemProvider == null) {
			displayNameItemProvider = new DisplayNameItemProvider(this);
		}

		return displayNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.GroupMembership} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupMembershipItemProvider groupMembershipItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.GroupMembership}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupMembershipAdapter() {
		if (groupMembershipItemProvider == null) {
			groupMembershipItemProvider = new GroupMembershipItemProvider(this);
		}

		return groupMembershipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.OrFeatureGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrFeatureGroupItemProvider orFeatureGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.OrFeatureGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrFeatureGroupAdapter() {
		if (orFeatureGroupItemProvider == null) {
			orFeatureGroupItemProvider = new OrFeatureGroupItemProvider(this);
		}

		return orFeatureGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.XorFeatureGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XorFeatureGroupItemProvider xorFeatureGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.XorFeatureGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXorFeatureGroupAdapter() {
		if (xorFeatureGroupItemProvider == null) {
			xorFeatureGroupItemProvider = new XorFeatureGroupItemProvider(this);
		}

		return xorFeatureGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.FeatureRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureRequirementItemProvider featureRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.FeatureRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureRequirementAdapter() {
		if (featureRequirementItemProvider == null) {
			featureRequirementItemProvider = new FeatureRequirementItemProvider(this);
		}

		return featureRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.FeatureExclusion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureExclusionItemProvider featureExclusionItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.FeatureExclusion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureExclusionAdapter() {
		if (featureExclusionItemProvider == null) {
			featureExclusionItemProvider = new FeatureExclusionItemProvider(this);
		}

		return featureExclusionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.RootRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootRelationshipItemProvider rootRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.RootRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootRelationshipAdapter() {
		if (rootRelationshipItemProvider == null) {
			rootRelationshipItemProvider = new RootRelationshipItemProvider(this);
		}

		return rootRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.ChildRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildRelationshipItemProvider childRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.ChildRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildRelationshipAdapter() {
		if (childRelationshipItemProvider == null) {
			childRelationshipItemProvider = new ChildRelationshipItemProvider(this);
		}

		return childRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.Mandatory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MandatoryItemProvider mandatoryItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.Mandatory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMandatoryAdapter() {
		if (mandatoryItemProvider == null) {
			mandatoryItemProvider = new MandatoryItemProvider(this);
		}

		return mandatoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai1.supermod.mm.feature.Elimination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EliminationItemProvider eliminationItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai1.supermod.mm.feature.Elimination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEliminationAdapter() {
		if (eliminationItemProvider == null) {
			eliminationItemProvider = new EliminationItemProvider(this);
		}

		return eliminationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (featureModelItemProvider != null) featureModelItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (displayNameItemProvider != null) displayNameItemProvider.dispose();
		if (groupMembershipItemProvider != null) groupMembershipItemProvider.dispose();
		if (orFeatureGroupItemProvider != null) orFeatureGroupItemProvider.dispose();
		if (xorFeatureGroupItemProvider != null) xorFeatureGroupItemProvider.dispose();
		if (featureRequirementItemProvider != null) featureRequirementItemProvider.dispose();
		if (featureExclusionItemProvider != null) featureExclusionItemProvider.dispose();
		if (rootRelationshipItemProvider != null) rootRelationshipItemProvider.dispose();
		if (childRelationshipItemProvider != null) childRelationshipItemProvider.dispose();
		if (mandatoryItemProvider != null) mandatoryItemProvider.dispose();
		if (eliminationItemProvider != null) eliminationItemProvider.dispose();
	}

}
